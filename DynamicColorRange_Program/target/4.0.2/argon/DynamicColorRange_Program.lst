
c:/Users/cgame/Documents/IoT/DynamicColorRangeDevice/DynamicColorRange_Program/target/4.0.2/argon/DynamicColorRange_Program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002b40  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b6b60  000b6b60  00006b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b6b84  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  2003e500  000b6b88  0001e500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000280  2003e570  2003e570  0002e570  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b6bf8  000b6bf8  00026bf8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b6c20  000b6c20  00026c20  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0011578c  00000000  00000000  00026c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00013205  00000000  00000000  0013c3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00036354  00000000  00000000  0014f5b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002c70  00000000  00000000  00185909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a0c8  00000000  00000000  00188579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a6fa  00000000  00000000  00192641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003f40e  00000000  00000000  001ccd3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00133c2b  00000000  00000000  0020c149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00007c5c  00000000  00000000  0033fd74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f002 fa8b 	bl	b654c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f002 fa93 	bl	b6568 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e500 	.word	0x2003e500
   b404c:	000b6b88 	.word	0x000b6b88
   b4050:	2003e570 	.word	0x2003e570
   b4054:	2003e570 	.word	0x2003e570
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f000 feab 	bl	b4dbc <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b6b3c 	.word	0x000b6b3c
   b4080:	000b6b60 	.word	0x000b6b60

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b822 	b.w	b40cc <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f97d 	bl	b4388 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f000 be4b 	b.w	b4d2c <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f000 bd0d 	b.w	b4ab4 <malloc>

000b409a <_Znaj>:
   b409a:	f000 bd0b 	b.w	b4ab4 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f000 bd11 	b.w	b4ac4 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f000 fc5e 	bl	b496c <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b470d 	.word	0x000b470d
   b40b8:	000b66e8 	.word	0x000b66e8

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <setup>:
int timer;
bool buttonPressed, snapPicture, test;

SYSTEM_MODE(SEMI_AUTOMATIC);

void setup() {
   b40cc:	b538      	push	{r3, r4, r5, lr}
  Serial.begin(9600);
   b40ce:	f000 ff97 	bl	b5000 <_Z16_fetch_usbserialv>
   b40d2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40d6:	f000 ff83 	bl	b4fe0 <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b40da:	2000      	movs	r0, #0
   b40dc:	f000 fb26 	bl	b472c <hal_timer_millis>
        while (_while() && !_condition()) {
   b40e0:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b40e4:	4604      	mov	r4, r0
   b40e6:	2000      	movs	r0, #0
   b40e8:	f000 fb20 	bl	b472c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b40ec:	1b00      	subs	r0, r0, r4
   b40ee:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b40f2:	42a8      	cmp	r0, r5
   b40f4:	f171 0300 	sbcs.w	r3, r1, #0
   b40f8:	d207      	bcs.n	b410a <setup+0x3e>
  waitFor(Serial.isConnected, 10000);
   b40fa:	f000 ff81 	bl	b5000 <_Z16_fetch_usbserialv>
   b40fe:	f000 ff73 	bl	b4fe8 <_ZN9USBSerial11isConnectedEv>
   b4102:	b910      	cbnz	r0, b410a <setup+0x3e>
            spark_process();
   b4104:	f000 fcc6 	bl	b4a94 <spark_process>
        while (_while() && !_condition()) {
   b4108:	e7ed      	b.n	b40e6 <setup+0x1a>
   b410a:	f000 ff79 	bl	b5000 <_Z16_fetch_usbserialv>
   b410e:	f000 ff6b 	bl	b4fe8 <_ZN9USBSerial11isConnectedEv>

  pinMode(REDPIN,OUTPUT);
   b4112:	2101      	movs	r1, #1
   b4114:	200e      	movs	r0, #14
   b4116:	f001 fc2f 	bl	b5978 <pinMode>
  pinMode(GREENPIN,OUTPUT);
   b411a:	2101      	movs	r1, #1
   b411c:	200f      	movs	r0, #15
   b411e:	f001 fc2b 	bl	b5978 <pinMode>
  pinMode(BLUEPIN,OUTPUT);
   b4122:	2101      	movs	r1, #1
   b4124:	2010      	movs	r0, #16
   b4126:	f001 fc27 	bl	b5978 <pinMode>
  pinMode(BUTTONPIN,INPUT);
   b412a:	2100      	movs	r1, #0
   b412c:	2011      	movs	r0, #17
   b412e:	f001 fc23 	bl	b5978 <pinMode>
  pinMode(D7, OUTPUT);
   b4132:	2101      	movs	r1, #1
   b4134:	2007      	movs	r0, #7
   b4136:	f001 fc1f 	bl	b5978 <pinMode>
  pinMode(A0, OUTPUT);
   b413a:	2101      	movs	r1, #1
   b413c:	2013      	movs	r0, #19
   b413e:	f001 fc1b 	bl	b5978 <pinMode>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4142:	f000 faeb 	bl	b471c <HAL_Timer_Get_Milli_Seconds>

  timer = millis();
   b4146:	4b01      	ldr	r3, [pc, #4]	; (b414c <setup+0x80>)
   b4148:	6018      	str	r0, [r3, #0]
}
   b414a:	bd38      	pop	{r3, r4, r5, pc}
   b414c:	2003e6b4 	.word	0x2003e6b4

000b4150 <_Z7turnLedifiii>:
      currentColor = 0;
    }
  }
}

void turnLed(int color, float brightnessPercent, int redPin, int greenPin, int bluePin) {
   b4150:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b4154:	4615      	mov	r5, r2
    static int black = 0, red = 1, orange = 2, yellow = 3, green = 4, cyan = 5, blue = 6, purple = 7, white = 8;
    // quick reset, otherwise colors mix ever so often
    analogWrite(redPin, LOW);
   b4156:	b28f      	uxth	r7, r1
void turnLed(int color, float brightnessPercent, int redPin, int greenPin, int bluePin) {
   b4158:	461c      	mov	r4, r3
   b415a:	4606      	mov	r6, r0
    analogWrite(redPin, LOW);
   b415c:	2100      	movs	r1, #0
   b415e:	4638      	mov	r0, r7
    analogWrite(greenPin, LOW);
   b4160:	b2ad      	uxth	r5, r5
void turnLed(int color, float brightnessPercent, int redPin, int greenPin, int bluePin) {
   b4162:	ee10 8a10 	vmov	r8, s0
    analogWrite(bluePin, LOW);
   b4166:	b2a4      	uxth	r4, r4
    analogWrite(redPin, LOW);
   b4168:	f001 fc43 	bl	b59f2 <_Z11analogWritetm>
    analogWrite(greenPin, LOW);
   b416c:	2100      	movs	r1, #0
   b416e:	4628      	mov	r0, r5
   b4170:	f001 fc3f 	bl	b59f2 <_Z11analogWritetm>
    analogWrite(bluePin, LOW);
   b4174:	2100      	movs	r1, #0
   b4176:	4620      	mov	r0, r4
   b4178:	f001 fc3b 	bl	b59f2 <_Z11analogWritetm>

    if(color == black) {
   b417c:	b976      	cbnz	r6, b419c <_Z7turnLedifiii+0x4c>
        analogWrite(redPin, LOW);
   b417e:	4631      	mov	r1, r6
        analogWrite(greenPin, LOW);
        analogWrite(bluePin, LOW);
        //Serial.printf("Current LED color = black     \r");
    }
    if(color == red) {
        analogWrite(redPin, 255.0/(101.0-brightnessPercent));
   b4180:	4638      	mov	r0, r7
   b4182:	f001 fc36 	bl	b59f2 <_Z11analogWritetm>
        analogWrite(greenPin, LOW);
   b4186:	2100      	movs	r1, #0
        analogWrite(bluePin, LOW);
        //Serial.printf("Current LED color = orange     \r");
    }
    if(color == yellow) {
        analogWrite(redPin, 200.0/(101.0-brightnessPercent));
        analogWrite(greenPin, 255.0/(101.0-brightnessPercent));
   b4188:	4628      	mov	r0, r5
   b418a:	f001 fc32 	bl	b59f2 <_Z11analogWritetm>
        analogWrite(bluePin, LOW);
   b418e:	2100      	movs	r1, #0
   b4190:	4620      	mov	r0, r4
   b4192:	f001 fc2e 	bl	b59f2 <_Z11analogWritetm>
        analogWrite(redPin, 145.0/(101.0-brightnessPercent));
        analogWrite(greenPin, 255.0/(101.0-brightnessPercent));
        analogWrite(bluePin, 255.0/(101.0-brightnessPercent));
        //Serial.printf("Current LED color = white     \r");
    }
}
   b4196:	b003      	add	sp, #12
   b4198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(color == red) {
   b419c:	2e01      	cmp	r6, #1
   b419e:	d024      	beq.n	b41ea <_Z7turnLedifiii+0x9a>
    if(color == orange) {
   b41a0:	2e02      	cmp	r6, #2
   b41a2:	d136      	bne.n	b4212 <_Z7turnLedifiii+0xc2>
        analogWrite(redPin, 235.0/(101.0-brightnessPercent));
   b41a4:	4640      	mov	r0, r8
   b41a6:	f001 ff41 	bl	b602c <__aeabi_f2d>
   b41aa:	4602      	mov	r2, r0
   b41ac:	460b      	mov	r3, r1
   b41ae:	2000      	movs	r0, #0
   b41b0:	4971      	ldr	r1, [pc, #452]	; (b4378 <_Z7turnLedifiii+0x228>)
   b41b2:	f001 fddb 	bl	b5d6c <__aeabi_dsub>
   b41b6:	4680      	mov	r8, r0
   b41b8:	4689      	mov	r9, r1
   b41ba:	4602      	mov	r2, r0
   b41bc:	460b      	mov	r3, r1
   b41be:	a168      	add	r1, pc, #416	; (adr r1, b4360 <_Z7turnLedifiii+0x210>)
   b41c0:	e9d1 0100 	ldrd	r0, r1, [r1]
        analogWrite(redPin, 200.0/(101.0-brightnessPercent));
   b41c4:	f002 f8b4 	bl	b6330 <__aeabi_ddiv>
   b41c8:	f002 f99a 	bl	b6500 <__aeabi_d2uiz>
   b41cc:	4601      	mov	r1, r0
   b41ce:	4638      	mov	r0, r7
   b41d0:	f001 fc0f 	bl	b59f2 <_Z11analogWritetm>
        analogWrite(greenPin, 255.0/(101.0-brightnessPercent));
   b41d4:	4642      	mov	r2, r8
   b41d6:	464b      	mov	r3, r9
   b41d8:	a163      	add	r1, pc, #396	; (adr r1, b4368 <_Z7turnLedifiii+0x218>)
   b41da:	e9d1 0100 	ldrd	r0, r1, [r1]
   b41de:	f002 f8a7 	bl	b6330 <__aeabi_ddiv>
   b41e2:	f002 f98d 	bl	b6500 <__aeabi_d2uiz>
   b41e6:	4601      	mov	r1, r0
   b41e8:	e7ce      	b.n	b4188 <_Z7turnLedifiii+0x38>
        analogWrite(redPin, 255.0/(101.0-brightnessPercent));
   b41ea:	4640      	mov	r0, r8
   b41ec:	f001 ff1e 	bl	b602c <__aeabi_f2d>
   b41f0:	4602      	mov	r2, r0
   b41f2:	460b      	mov	r3, r1
   b41f4:	2000      	movs	r0, #0
   b41f6:	4960      	ldr	r1, [pc, #384]	; (b4378 <_Z7turnLedifiii+0x228>)
   b41f8:	f001 fdb8 	bl	b5d6c <__aeabi_dsub>
   b41fc:	4602      	mov	r2, r0
   b41fe:	460b      	mov	r3, r1
   b4200:	a159      	add	r1, pc, #356	; (adr r1, b4368 <_Z7turnLedifiii+0x218>)
   b4202:	e9d1 0100 	ldrd	r0, r1, [r1]
   b4206:	f002 f893 	bl	b6330 <__aeabi_ddiv>
   b420a:	f002 f979 	bl	b6500 <__aeabi_d2uiz>
   b420e:	4601      	mov	r1, r0
   b4210:	e7b6      	b.n	b4180 <_Z7turnLedifiii+0x30>
    if(color == yellow) {
   b4212:	2e03      	cmp	r6, #3
   b4214:	d025      	beq.n	b4262 <_Z7turnLedifiii+0x112>
    if(color == green) {
   b4216:	2e04      	cmp	r6, #4
   b4218:	d033      	beq.n	b4282 <_Z7turnLedifiii+0x132>
    if(color == cyan) {
   b421a:	2e05      	cmp	r6, #5
   b421c:	d052      	beq.n	b42c4 <_Z7turnLedifiii+0x174>
    if(color == blue) {
   b421e:	2e06      	cmp	r6, #6
   b4220:	d06d      	beq.n	b42fe <_Z7turnLedifiii+0x1ae>
    if(color == purple) {
   b4222:	2e07      	cmp	r6, #7
   b4224:	f000 8087 	beq.w	b4336 <_Z7turnLedifiii+0x1e6>
    if(color == white) {
   b4228:	2e08      	cmp	r6, #8
   b422a:	d1b4      	bne.n	b4196 <_Z7turnLedifiii+0x46>
        analogWrite(redPin, 145.0/(101.0-brightnessPercent));
   b422c:	4640      	mov	r0, r8
   b422e:	f001 fefd 	bl	b602c <__aeabi_f2d>
   b4232:	4602      	mov	r2, r0
   b4234:	460b      	mov	r3, r1
   b4236:	2000      	movs	r0, #0
   b4238:	494f      	ldr	r1, [pc, #316]	; (b4378 <_Z7turnLedifiii+0x228>)
   b423a:	f001 fd97 	bl	b5d6c <__aeabi_dsub>
   b423e:	4602      	mov	r2, r0
   b4240:	460b      	mov	r3, r1
   b4242:	4680      	mov	r8, r0
   b4244:	4689      	mov	r9, r1
   b4246:	a14a      	add	r1, pc, #296	; (adr r1, b4370 <_Z7turnLedifiii+0x220>)
   b4248:	e9d1 0100 	ldrd	r0, r1, [r1]
   b424c:	f002 f870 	bl	b6330 <__aeabi_ddiv>
   b4250:	f002 f956 	bl	b6500 <__aeabi_d2uiz>
   b4254:	4601      	mov	r1, r0
   b4256:	4638      	mov	r0, r7
   b4258:	f001 fbcb 	bl	b59f2 <_Z11analogWritetm>
        analogWrite(greenPin, 255.0/(101.0-brightnessPercent));
   b425c:	4642      	mov	r2, r8
   b425e:	464b      	mov	r3, r9
   b4260:	e03f      	b.n	b42e2 <_Z7turnLedifiii+0x192>
        analogWrite(redPin, 200.0/(101.0-brightnessPercent));
   b4262:	4640      	mov	r0, r8
   b4264:	f001 fee2 	bl	b602c <__aeabi_f2d>
   b4268:	4602      	mov	r2, r0
   b426a:	460b      	mov	r3, r1
   b426c:	2000      	movs	r0, #0
   b426e:	4942      	ldr	r1, [pc, #264]	; (b4378 <_Z7turnLedifiii+0x228>)
   b4270:	f001 fd7c 	bl	b5d6c <__aeabi_dsub>
   b4274:	4680      	mov	r8, r0
   b4276:	4689      	mov	r9, r1
   b4278:	4602      	mov	r2, r0
   b427a:	460b      	mov	r3, r1
   b427c:	2000      	movs	r0, #0
   b427e:	493f      	ldr	r1, [pc, #252]	; (b437c <_Z7turnLedifiii+0x22c>)
   b4280:	e7a0      	b.n	b41c4 <_Z7turnLedifiii+0x74>
        analogWrite(redPin, LOW);
   b4282:	2100      	movs	r1, #0
   b4284:	4638      	mov	r0, r7
   b4286:	f001 fbb4 	bl	b59f2 <_Z11analogWritetm>
        analogWrite(greenPin, 255.0/(101.0-brightnessPercent));
   b428a:	4640      	mov	r0, r8
   b428c:	f001 fece 	bl	b602c <__aeabi_f2d>
   b4290:	4602      	mov	r2, r0
   b4292:	460b      	mov	r3, r1
   b4294:	2000      	movs	r0, #0
   b4296:	4938      	ldr	r1, [pc, #224]	; (b4378 <_Z7turnLedifiii+0x228>)
   b4298:	f001 fd68 	bl	b5d6c <__aeabi_dsub>
   b429c:	4602      	mov	r2, r0
   b429e:	460b      	mov	r3, r1
   b42a0:	a131      	add	r1, pc, #196	; (adr r1, b4368 <_Z7turnLedifiii+0x218>)
   b42a2:	e9d1 0100 	ldrd	r0, r1, [r1]
   b42a6:	f002 f843 	bl	b6330 <__aeabi_ddiv>
   b42aa:	f002 f929 	bl	b6500 <__aeabi_d2uiz>
   b42ae:	4601      	mov	r1, r0
   b42b0:	4628      	mov	r0, r5
   b42b2:	f001 fb9e 	bl	b59f2 <_Z11analogWritetm>
        analogWrite(bluePin, LOW);
   b42b6:	2100      	movs	r1, #0
        analogWrite(bluePin, 255.0/(101.0-brightnessPercent));
   b42b8:	4620      	mov	r0, r4
}
   b42ba:	b003      	add	sp, #12
   b42bc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        analogWrite(bluePin, 255.0/(101.0-brightnessPercent));
   b42c0:	f001 bb97 	b.w	b59f2 <_Z11analogWritetm>
        analogWrite(redPin, LOW);
   b42c4:	2100      	movs	r1, #0
   b42c6:	4638      	mov	r0, r7
   b42c8:	f001 fb93 	bl	b59f2 <_Z11analogWritetm>
        analogWrite(greenPin, 255.0/(101.0-brightnessPercent));
   b42cc:	4640      	mov	r0, r8
   b42ce:	f001 fead 	bl	b602c <__aeabi_f2d>
   b42d2:	4602      	mov	r2, r0
   b42d4:	460b      	mov	r3, r1
   b42d6:	2000      	movs	r0, #0
   b42d8:	4927      	ldr	r1, [pc, #156]	; (b4378 <_Z7turnLedifiii+0x228>)
   b42da:	f001 fd47 	bl	b5d6c <__aeabi_dsub>
   b42de:	4602      	mov	r2, r0
   b42e0:	460b      	mov	r3, r1
        analogWrite(greenPin, 255.0/(101.0-brightnessPercent));
   b42e2:	a121      	add	r1, pc, #132	; (adr r1, b4368 <_Z7turnLedifiii+0x218>)
   b42e4:	e9d1 0100 	ldrd	r0, r1, [r1]
   b42e8:	f002 f822 	bl	b6330 <__aeabi_ddiv>
   b42ec:	f002 f908 	bl	b6500 <__aeabi_d2uiz>
   b42f0:	4601      	mov	r1, r0
   b42f2:	9001      	str	r0, [sp, #4]
   b42f4:	4628      	mov	r0, r5
   b42f6:	f001 fb7c 	bl	b59f2 <_Z11analogWritetm>
        analogWrite(bluePin, 255.0/(101.0-brightnessPercent));
   b42fa:	9901      	ldr	r1, [sp, #4]
   b42fc:	e7dc      	b.n	b42b8 <_Z7turnLedifiii+0x168>
        analogWrite(redPin, LOW);
   b42fe:	2100      	movs	r1, #0
        analogWrite(redPin, 15.0/(101-brightnessPercent));
   b4300:	4638      	mov	r0, r7
   b4302:	f001 fb76 	bl	b59f2 <_Z11analogWritetm>
        analogWrite(greenPin, LOW);
   b4306:	2100      	movs	r1, #0
   b4308:	4628      	mov	r0, r5
   b430a:	f001 fb72 	bl	b59f2 <_Z11analogWritetm>
        analogWrite(bluePin, 255.0/(101.0-brightnessPercent));
   b430e:	4640      	mov	r0, r8
   b4310:	f001 fe8c 	bl	b602c <__aeabi_f2d>
   b4314:	4602      	mov	r2, r0
   b4316:	460b      	mov	r3, r1
   b4318:	2000      	movs	r0, #0
   b431a:	4917      	ldr	r1, [pc, #92]	; (b4378 <_Z7turnLedifiii+0x228>)
   b431c:	f001 fd26 	bl	b5d6c <__aeabi_dsub>
   b4320:	4602      	mov	r2, r0
   b4322:	460b      	mov	r3, r1
   b4324:	a110      	add	r1, pc, #64	; (adr r1, b4368 <_Z7turnLedifiii+0x218>)
   b4326:	e9d1 0100 	ldrd	r0, r1, [r1]
   b432a:	f002 f801 	bl	b6330 <__aeabi_ddiv>
   b432e:	f002 f8e7 	bl	b6500 <__aeabi_d2uiz>
   b4332:	4601      	mov	r1, r0
   b4334:	e7c0      	b.n	b42b8 <_Z7turnLedifiii+0x168>
        analogWrite(redPin, 15.0/(101-brightnessPercent));
   b4336:	ee07 8a10 	vmov	s14, r8
   b433a:	eddf 7a11 	vldr	s15, [pc, #68]	; b4380 <_Z7turnLedifiii+0x230>
   b433e:	ee77 7ac7 	vsub.f32	s15, s15, s14
   b4342:	ee17 0a90 	vmov	r0, s15
   b4346:	f001 fe71 	bl	b602c <__aeabi_f2d>
   b434a:	4602      	mov	r2, r0
   b434c:	460b      	mov	r3, r1
   b434e:	2000      	movs	r0, #0
   b4350:	490c      	ldr	r1, [pc, #48]	; (b4384 <_Z7turnLedifiii+0x234>)
   b4352:	f001 ffed 	bl	b6330 <__aeabi_ddiv>
   b4356:	f002 f8d3 	bl	b6500 <__aeabi_d2uiz>
   b435a:	4601      	mov	r1, r0
   b435c:	e7d0      	b.n	b4300 <_Z7turnLedifiii+0x1b0>
   b435e:	bf00      	nop
   b4360:	00000000 	.word	0x00000000
   b4364:	406d6000 	.word	0x406d6000
   b4368:	00000000 	.word	0x00000000
   b436c:	406fe000 	.word	0x406fe000
   b4370:	00000000 	.word	0x00000000
   b4374:	40622000 	.word	0x40622000
   b4378:	40594000 	.word	0x40594000
   b437c:	40690000 	.word	0x40690000
   b4380:	42ca0000 	.word	0x42ca0000
   b4384:	402e0000 	.word	0x402e0000

000b4388 <loop>:
void loop() {
   b4388:	b570      	push	{r4, r5, r6, lr}
  buttonPressed = digitalRead(A2);
   b438a:	2011      	movs	r0, #17
   b438c:	f001 fb1e 	bl	b59cc <digitalRead>
  if(buttonPressed != snapPicture) {
   b4390:	4e37      	ldr	r6, [pc, #220]	; (b4470 <loop+0xe8>)
  buttonPressed = digitalRead(A2);
   b4392:	4b38      	ldr	r3, [pc, #224]	; (b4474 <loop+0xec>)
   b4394:	4d38      	ldr	r5, [pc, #224]	; (b4478 <loop+0xf0>)
   b4396:	3800      	subs	r0, #0
   b4398:	bf18      	it	ne
   b439a:	2001      	movne	r0, #1
   b439c:	7018      	strb	r0, [r3, #0]
  if(buttonPressed != snapPicture) {
   b439e:	7833      	ldrb	r3, [r6, #0]
   b43a0:	4283      	cmp	r3, r0
      snapPicture = buttonPressed;
   b43a2:	bf18      	it	ne
   b43a4:	7030      	strbne	r0, [r6, #0]
  if (snapPicture) {
   b43a6:	7833      	ldrb	r3, [r6, #0]
   b43a8:	b96b      	cbnz	r3, b43c6 <loop+0x3e>
    if (snapPicture != test) {
   b43aa:	782b      	ldrb	r3, [r5, #0]
   b43ac:	2b00      	cmp	r3, #0
   b43ae:	d03d      	beq.n	b442c <loop+0xa4>
      digitalWrite(D7,LOW);
   b43b0:	2100      	movs	r1, #0
   b43b2:	2007      	movs	r0, #7
   b43b4:	f001 faf1 	bl	b599a <digitalWrite>
      digitalWrite(A0,LOW);
   b43b8:	2100      	movs	r1, #0
   b43ba:	2013      	movs	r0, #19
   b43bc:	f001 faed 	bl	b599a <digitalWrite>
      test = 0;
   b43c0:	2300      	movs	r3, #0
   b43c2:	702b      	strb	r3, [r5, #0]
   b43c4:	e032      	b.n	b442c <loop+0xa4>
    if (snapPicture != test) {
   b43c6:	782c      	ldrb	r4, [r5, #0]
   b43c8:	bb84      	cbnz	r4, b442c <loop+0xa4>
      digitalWrite(D7,HIGH);
   b43ca:	2101      	movs	r1, #1
   b43cc:	2007      	movs	r0, #7
   b43ce:	f001 fae4 	bl	b599a <digitalWrite>
      digitalWrite(A0,HIGH);
   b43d2:	2101      	movs	r1, #1
   b43d4:	2013      	movs	r0, #19
   b43d6:	f001 fae0 	bl	b599a <digitalWrite>
      delay(1500);
   b43da:	f240 50dc 	movw	r0, #1500	; 0x5dc
   b43de:	f000 fc63 	bl	b4ca8 <delay>
      digitalWrite(D7,LOW);
   b43e2:	4621      	mov	r1, r4
   b43e4:	2007      	movs	r0, #7
   b43e6:	f001 fad8 	bl	b599a <digitalWrite>
      digitalWrite(A0,LOW);
   b43ea:	4621      	mov	r1, r4
   b43ec:	2013      	movs	r0, #19
   b43ee:	f001 fad4 	bl	b599a <digitalWrite>
      delay(1500);
   b43f2:	f240 50dc 	movw	r0, #1500	; 0x5dc
   b43f6:	f000 fc57 	bl	b4ca8 <delay>
      digitalWrite(D7,HIGH);
   b43fa:	2101      	movs	r1, #1
   b43fc:	2007      	movs	r0, #7
   b43fe:	f001 facc 	bl	b599a <digitalWrite>
      digitalWrite(A0,HIGH);
   b4402:	2101      	movs	r1, #1
   b4404:	2013      	movs	r0, #19
   b4406:	f001 fac8 	bl	b599a <digitalWrite>
      delay(1500);
   b440a:	f240 50dc 	movw	r0, #1500	; 0x5dc
   b440e:	f000 fc4b 	bl	b4ca8 <delay>
      digitalWrite(D7,LOW);
   b4412:	4621      	mov	r1, r4
   b4414:	2007      	movs	r0, #7
   b4416:	f001 fac0 	bl	b599a <digitalWrite>
      digitalWrite(A0,LOW);
   b441a:	4621      	mov	r1, r4
   b441c:	2013      	movs	r0, #19
   b441e:	f001 fabc 	bl	b599a <digitalWrite>
      test = 1;
   b4422:	2301      	movs	r3, #1
   b4424:	702b      	strb	r3, [r5, #0]
  if (snapPicture == 0) {
   b4426:	7833      	ldrb	r3, [r6, #0]
   b4428:	2b00      	cmp	r3, #0
   b442a:	d0c1      	beq.n	b43b0 <loop+0x28>
  if((millis()-timer) > 5000) {
   b442c:	4c13      	ldr	r4, [pc, #76]	; (b447c <loop+0xf4>)
   b442e:	f000 f975 	bl	b471c <HAL_Timer_Get_Milli_Seconds>
   b4432:	6823      	ldr	r3, [r4, #0]
   b4434:	1ac0      	subs	r0, r0, r3
   b4436:	f241 3388 	movw	r3, #5000	; 0x1388
   b443a:	4298      	cmp	r0, r3
   b443c:	d916      	bls.n	b446c <loop+0xe4>
   b443e:	f000 f96d 	bl	b471c <HAL_Timer_Get_Milli_Seconds>
    timer = millis();
   b4442:	6020      	str	r0, [r4, #0]
    currentColor++;
   b4444:	4c0e      	ldr	r4, [pc, #56]	; (b4480 <loop+0xf8>)
    turnLed(COLOR[currentColor], BRIGHTNESS, REDPIN, GREENPIN, BLUEPIN);
   b4446:	4d0f      	ldr	r5, [pc, #60]	; (b4484 <loop+0xfc>)
    currentColor++;
   b4448:	6820      	ldr	r0, [r4, #0]
    turnLed(COLOR[currentColor], BRIGHTNESS, REDPIN, GREENPIN, BLUEPIN);
   b444a:	ed95 0a00 	vldr	s0, [r5]
   b444e:	4d0e      	ldr	r5, [pc, #56]	; (b4488 <loop+0x100>)
    currentColor++;
   b4450:	3001      	adds	r0, #1
   b4452:	6020      	str	r0, [r4, #0]
    turnLed(COLOR[currentColor], BRIGHTNESS, REDPIN, GREENPIN, BLUEPIN);
   b4454:	2310      	movs	r3, #16
   b4456:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
   b445a:	220f      	movs	r2, #15
   b445c:	210e      	movs	r1, #14
   b445e:	f7ff fe77 	bl	b4150 <_Z7turnLedifiii>
    if (currentColor>8) {
   b4462:	6823      	ldr	r3, [r4, #0]
   b4464:	2b08      	cmp	r3, #8
      currentColor = 0;
   b4466:	bfc4      	itt	gt
   b4468:	2300      	movgt	r3, #0
   b446a:	6023      	strgt	r3, [r4, #0]
}
   b446c:	bd70      	pop	{r4, r5, r6, pc}
   b446e:	bf00      	nop
   b4470:	2003e674 	.word	0x2003e674
   b4474:	2003e598 	.word	0x2003e598
   b4478:	2003e6b0 	.word	0x2003e6b0
   b447c:	2003e6b4 	.word	0x2003e6b4
   b4480:	2003e59c 	.word	0x2003e59c
   b4484:	2003e500 	.word	0x2003e500
   b4488:	000b674c 	.word	0x000b674c

000b448c <_GLOBAL__sub_I_TheClient>:
}
   b448c:	b537      	push	{r0, r1, r2, r4, r5, lr}
TCPClient TheClient;
   b448e:	4d12      	ldr	r5, [pc, #72]	; (b44d8 <_GLOBAL__sub_I_TheClient+0x4c>)
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   b4490:	4c12      	ldr	r4, [pc, #72]	; (b44dc <_GLOBAL__sub_I_TheClient+0x50>)
   b4492:	4628      	mov	r0, r5
   b4494:	f001 f92e 	bl	b56f4 <_ZN9TCPClientC1Ev>
   b4498:	4b11      	ldr	r3, [pc, #68]	; (b44e0 <_GLOBAL__sub_I_TheClient+0x54>)
   b449a:	9300      	str	r3, [sp, #0]
   b449c:	4911      	ldr	r1, [pc, #68]	; (b44e4 <_GLOBAL__sub_I_TheClient+0x58>)
   b449e:	4b12      	ldr	r3, [pc, #72]	; (b44e8 <_GLOBAL__sub_I_TheClient+0x5c>)
   b44a0:	f240 725b 	movw	r2, #1883	; 0x75b
   b44a4:	4620      	mov	r0, r4
   b44a6:	f000 f8af 	bl	b4608 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   b44aa:	4b10      	ldr	r3, [pc, #64]	; (b44ec <_GLOBAL__sub_I_TheClient+0x60>)
   b44ac:	6023      	str	r3, [r4, #0]
Adafruit_MQTT_Subscribe sub_image1 = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/image"); 
   b44ae:	4a10      	ldr	r2, [pc, #64]	; (b44f0 <_GLOBAL__sub_I_TheClient+0x64>)
   b44b0:	4810      	ldr	r0, [pc, #64]	; (b44f4 <_GLOBAL__sub_I_TheClient+0x68>)
   b44b2:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
   b44b6:	2300      	movs	r3, #0
   b44b8:	4621      	mov	r1, r4
   b44ba:	f000 f8c1 	bl	b4640 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
              error_(SYSTEM_ERROR_NONE) {
   b44be:	4b0e      	ldr	r3, [pc, #56]	; (b44f8 <_GLOBAL__sub_I_TheClient+0x6c>)
   b44c0:	2200      	movs	r2, #0
   b44c2:	e9c3 2200 	strd	r2, r2, [r3]
        set_system_mode(mode);
   b44c6:	2002      	movs	r0, #2
    SleepResult() {}
   b44c8:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b44cc:	609a      	str	r2, [r3, #8]
}
   b44ce:	b003      	add	sp, #12
   b44d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        set_system_mode(mode);
   b44d4:	f000 ba5a 	b.w	b498c <set_system_mode>
   b44d8:	2003e57c 	.word	0x2003e57c
   b44dc:	2003e5a0 	.word	0x2003e5a0
   b44e0:	000b6716 	.word	0x000b6716
   b44e4:	000b6706 	.word	0x000b6706
   b44e8:	000b66fd 	.word	0x000b66fd
   b44ec:	000b6778 	.word	0x000b6778
   b44f0:	000b6737 	.word	0x000b6737
   b44f4:	2003e678 	.word	0x2003e678
   b44f8:	2003e570 	.word	0x2003e570

000b44fc <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   b44fc:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   b44fe:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b4502:	6803      	ldr	r3, [r0, #0]
   b4504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4506:	4798      	blx	r3
}
   b4508:	3800      	subs	r0, #0
   b450a:	bf18      	it	ne
   b450c:	2001      	movne	r0, #1
   b450e:	bd08      	pop	{r3, pc}

000b4510 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   b4510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4512:	4606      	mov	r6, r0
   b4514:	460f      	mov	r7, r1
   b4516:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   b4518:	b1c4      	cbz	r4, b454c <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   b451a:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b451e:	6803      	ldr	r3, [r0, #0]
   b4520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4522:	4798      	blx	r3
   b4524:	b908      	cbnz	r0, b452a <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   b4526:	2000      	movs	r0, #0
    }
  }
  return true;
}
   b4528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ret = client->write(buffer, sendlen);
   b452a:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   b452e:	2cfa      	cmp	r4, #250	; 0xfa
   b4530:	6803      	ldr	r3, [r0, #0]
   b4532:	4625      	mov	r5, r4
   b4534:	bfa8      	it	ge
   b4536:	25fa      	movge	r5, #250	; 0xfa
   b4538:	68db      	ldr	r3, [r3, #12]
   b453a:	462a      	mov	r2, r5
   b453c:	4639      	mov	r1, r7
   b453e:	4798      	blx	r3
   b4540:	b283      	uxth	r3, r0
      len -= ret;
   b4542:	1ae4      	subs	r4, r4, r3
      if (ret != sendlen) {
   b4544:	429d      	cmp	r5, r3
      len -= ret;
   b4546:	b2a4      	uxth	r4, r4
      if (ret != sendlen) {
   b4548:	d0e6      	beq.n	b4518 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   b454a:	e7ec      	b.n	b4526 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
  return true;
   b454c:	2001      	movs	r0, #1
   b454e:	e7eb      	b.n	b4528 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x18>

000b4550 <_ZN19Adafruit_MQTT_SPARKD1Ev>:
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   b4550:	4770      	bx	lr

000b4552 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
                                          int16_t timeout) {
   b4552:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4556:	4606      	mov	r6, r0
   b4558:	4688      	mov	r8, r1
   b455a:	4691      	mov	r9, r2
   b455c:	461f      	mov	r7, r3
   b455e:	461d      	mov	r5, r3
  uint16_t len = 0;
   b4560:	2400      	movs	r4, #0
  while (client->connected() && (timeout >= 0)) {
   b4562:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b4566:	6803      	ldr	r3, [r0, #0]
   b4568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b456a:	4798      	blx	r3
   b456c:	b1d0      	cbz	r0, b45a4 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   b456e:	2d00      	cmp	r5, #0
   b4570:	db18      	blt.n	b45a4 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    while (client->available()) {
   b4572:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b4576:	6803      	ldr	r3, [r0, #0]
   b4578:	691b      	ldr	r3, [r3, #16]
   b457a:	4798      	blx	r3
   b457c:	b160      	cbz	r0, b4598 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      char c = client->read();
   b457e:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   b4582:	6803      	ldr	r3, [r0, #0]
   b4584:	695b      	ldr	r3, [r3, #20]
   b4586:	4798      	blx	r3
   b4588:	f808 0004 	strb.w	r0, [r8, r4]
      len++;
   b458c:	3401      	adds	r4, #1
   b458e:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   b4590:	454c      	cmp	r4, r9
   b4592:	d007      	beq.n	b45a4 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
      timeout = t;  // reset the timeout
   b4594:	463d      	mov	r5, r7
   b4596:	e7ec      	b.n	b4572 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   b4598:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   b459a:	200a      	movs	r0, #10
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   b459c:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   b459e:	f000 fb83 	bl	b4ca8 <delay>
  while (client->connected() && (timeout >= 0)) {
   b45a2:	e7de      	b.n	b4562 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
}
   b45a4:	4620      	mov	r0, r4
   b45a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b45aa <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
bool Adafruit_MQTT_SPARK::connectServer(){
   b45aa:	b570      	push	{r4, r5, r6, lr}
   b45ac:	4604      	mov	r4, r0
  memset(buffer, 0, sizeof(buffer));
   b45ae:	f100 0522 	add.w	r5, r0, #34	; 0x22
   b45b2:	2296      	movs	r2, #150	; 0x96
   b45b4:	2100      	movs	r1, #0
   b45b6:	4628      	mov	r0, r5
   b45b8:	f001 ffd6 	bl	b6568 <memset>
  strcpy((char *)buffer, servername);
   b45bc:	6861      	ldr	r1, [r4, #4]
   b45be:	4628      	mov	r0, r5
   b45c0:	f002 f812 	bl	b65e8 <strcpy>
  int r = client->connect((char *)buffer, portnum);
   b45c4:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   b45c8:	8922      	ldrh	r2, [r4, #8]
   b45ca:	6803      	ldr	r3, [r0, #0]
   b45cc:	4629      	mov	r1, r5
   b45ce:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   b45d0:	2300      	movs	r3, #0
   b45d2:	47b0      	blx	r6
}
   b45d4:	3800      	subs	r0, #0
   b45d6:	bf18      	it	ne
   b45d8:	2001      	movne	r0, #1
   b45da:	bd70      	pop	{r4, r5, r6, pc}

000b45dc <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   b45dc:	b510      	push	{r4, lr}
   b45de:	21d4      	movs	r1, #212	; 0xd4
   b45e0:	4604      	mov	r4, r0
   b45e2:	f7ff fd5c 	bl	b409e <_ZdlPvj>
   b45e6:	4620      	mov	r0, r4
   b45e8:	bd10      	pop	{r4, pc}

000b45ea <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:
bool Adafruit_MQTT_SPARK::disconnectServer() {
   b45ea:	b510      	push	{r4, lr}
   b45ec:	4604      	mov	r4, r0
  if (client->connected()) {
   b45ee:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   b45f2:	6803      	ldr	r3, [r0, #0]
   b45f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b45f6:	4798      	blx	r3
   b45f8:	b120      	cbz	r0, b4604 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   b45fa:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   b45fe:	6803      	ldr	r3, [r0, #0]
   b4600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4602:	4798      	blx	r3
}
   b4604:	2001      	movs	r0, #1
   b4606:	bd10      	pop	{r4, pc}

000b4608 <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   b4608:	b530      	push	{r4, r5, lr}
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
   b460a:	8102      	strh	r2, [r0, #8]
  clientid = "";
   b460c:	4a0a      	ldr	r2, [pc, #40]	; (b4638 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x30>)
                             const char *pass) {
   b460e:	4d0b      	ldr	r5, [pc, #44]	; (b463c <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x34>)
  username = user;
   b4610:	e9c0 2303 	strd	r2, r3, [r0, #12]
  password = pass;
   b4614:	9b03      	ldr	r3, [sp, #12]
   b4616:	6143      	str	r3, [r0, #20]

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   b4618:	2300      	movs	r3, #0
  servername = server;
   b461a:	e9c0 5100 	strd	r5, r1, [r0]
    subscriptions[i] = 0;
   b461e:	e9c0 332f 	strd	r3, r3, [r0, #188]	; 0xbc
   b4622:	e9c0 3331 	strd	r3, r3, [r0, #196]	; 0xc4
  }

  will_topic = 0;
  will_payload = 0;
   b4626:	e9c0 3306 	strd	r3, r3, [r0, #24]
    subscriptions[i] = 0;
   b462a:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  will_qos = 0;
   b462e:	8403      	strh	r3, [r0, #32]
  will_retain = 0;

  packet_id_counter = 0;
   b4630:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   b4634:	bd30      	pop	{r4, r5, pc}
   b4636:	bf00      	nop
   b4638:	000b6736 	.word	0x000b6736
   b463c:	000b679c 	.word	0x000b679c

000b4640 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>:
}


// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
   b4640:	b510      	push	{r4, lr}
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
  qos = q;
   b4642:	7103      	strb	r3, [r0, #4]
  datalen = 0;
   b4644:	2300      	movs	r3, #0
  callback_uint32t = 0;
  callback_buffer = 0;
  callback_double = 0;
   b4646:	e9c0 3308 	strd	r3, r3, [r0, #32]
  callback_io = 0;
   b464a:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  mqtt = mqttserver;
   b464e:	6341      	str	r1, [r0, #52]	; 0x34
  topic = feed;
   b4650:	6002      	str	r2, [r0, #0]
  datalen = 0;
   b4652:	8343      	strh	r3, [r0, #26]
  callback_uint32t = 0;
   b4654:	61c3      	str	r3, [r0, #28]
  io_feed = 0;
   b4656:	6303      	str	r3, [r0, #48]	; 0x30
}
   b4658:	bd10      	pop	{r4, pc}
	...

000b465c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b465c:	b508      	push	{r3, lr}
   b465e:	4b02      	ldr	r3, [pc, #8]	; (b4668 <netdb_freeaddrinfo+0xc>)
   b4660:	681b      	ldr	r3, [r3, #0]
   b4662:	689b      	ldr	r3, [r3, #8]
   b4664:	9301      	str	r3, [sp, #4]
   b4666:	bd08      	pop	{r3, pc}
   b4668:	00030268 	.word	0x00030268

000b466c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b466c:	b508      	push	{r3, lr}
   b466e:	4b02      	ldr	r3, [pc, #8]	; (b4678 <netdb_getaddrinfo+0xc>)
   b4670:	681b      	ldr	r3, [r3, #0]
   b4672:	68db      	ldr	r3, [r3, #12]
   b4674:	9301      	str	r3, [sp, #4]
   b4676:	bd08      	pop	{r3, pc}
   b4678:	00030268 	.word	0x00030268

000b467c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b467c:	b508      	push	{r3, lr}
   b467e:	4b02      	ldr	r3, [pc, #8]	; (b4688 <HAL_Validate_Pin_Function+0xc>)
   b4680:	681b      	ldr	r3, [r3, #0]
   b4682:	685b      	ldr	r3, [r3, #4]
   b4684:	9301      	str	r3, [sp, #4]
   b4686:	bd08      	pop	{r3, pc}
   b4688:	0003022c 	.word	0x0003022c

000b468c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b468c:	b508      	push	{r3, lr}
   b468e:	4b02      	ldr	r3, [pc, #8]	; (b4698 <HAL_Pin_Mode+0xc>)
   b4690:	681b      	ldr	r3, [r3, #0]
   b4692:	689b      	ldr	r3, [r3, #8]
   b4694:	9301      	str	r3, [sp, #4]
   b4696:	bd08      	pop	{r3, pc}
   b4698:	0003022c 	.word	0x0003022c

000b469c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b469c:	b508      	push	{r3, lr}
   b469e:	4b02      	ldr	r3, [pc, #8]	; (b46a8 <HAL_Get_Pin_Mode+0xc>)
   b46a0:	681b      	ldr	r3, [r3, #0]
   b46a2:	68db      	ldr	r3, [r3, #12]
   b46a4:	9301      	str	r3, [sp, #4]
   b46a6:	bd08      	pop	{r3, pc}
   b46a8:	0003022c 	.word	0x0003022c

000b46ac <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b46ac:	b508      	push	{r3, lr}
   b46ae:	4b02      	ldr	r3, [pc, #8]	; (b46b8 <HAL_GPIO_Write+0xc>)
   b46b0:	681b      	ldr	r3, [r3, #0]
   b46b2:	691b      	ldr	r3, [r3, #16]
   b46b4:	9301      	str	r3, [sp, #4]
   b46b6:	bd08      	pop	{r3, pc}
   b46b8:	0003022c 	.word	0x0003022c

000b46bc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b46bc:	b508      	push	{r3, lr}
   b46be:	4b02      	ldr	r3, [pc, #8]	; (b46c8 <HAL_GPIO_Read+0xc>)
   b46c0:	681b      	ldr	r3, [r3, #0]
   b46c2:	695b      	ldr	r3, [r3, #20]
   b46c4:	9301      	str	r3, [sp, #4]
   b46c6:	bd08      	pop	{r3, pc}
   b46c8:	0003022c 	.word	0x0003022c

000b46cc <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   b46cc:	b508      	push	{r3, lr}
   b46ce:	4b02      	ldr	r3, [pc, #8]	; (b46d8 <HAL_DAC_Write+0xc>)
   b46d0:	681b      	ldr	r3, [r3, #0]
   b46d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b46d4:	9301      	str	r3, [sp, #4]
   b46d6:	bd08      	pop	{r3, pc}
   b46d8:	0003022c 	.word	0x0003022c

000b46dc <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   b46dc:	b508      	push	{r3, lr}
   b46de:	4b02      	ldr	r3, [pc, #8]	; (b46e8 <hal_pwm_write_ext+0xc>)
   b46e0:	681b      	ldr	r3, [r3, #0]
   b46e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b46e4:	9301      	str	r3, [sp, #4]
   b46e6:	bd08      	pop	{r3, pc}
   b46e8:	0003022c 	.word	0x0003022c

000b46ec <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b46ec:	b508      	push	{r3, lr}
   b46ee:	4b02      	ldr	r3, [pc, #8]	; (b46f8 <if_index_to_name+0xc>)
   b46f0:	681b      	ldr	r3, [r3, #0]
   b46f2:	695b      	ldr	r3, [r3, #20]
   b46f4:	9301      	str	r3, [sp, #4]
   b46f6:	bd08      	pop	{r3, pc}
   b46f8:	0003026c 	.word	0x0003026c

000b46fc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b46fc:	b508      	push	{r3, lr}
   b46fe:	4b02      	ldr	r3, [pc, #8]	; (b4708 <HAL_RNG_GetRandomNumber+0xc>)
   b4700:	681b      	ldr	r3, [r3, #0]
   b4702:	685b      	ldr	r3, [r3, #4]
   b4704:	9301      	str	r3, [sp, #4]
   b4706:	bd08      	pop	{r3, pc}
   b4708:	00030218 	.word	0x00030218

000b470c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b470c:	b508      	push	{r3, lr}
   b470e:	4b02      	ldr	r3, [pc, #8]	; (b4718 <HAL_Delay_Microseconds+0xc>)
   b4710:	681b      	ldr	r3, [r3, #0]
   b4712:	68db      	ldr	r3, [r3, #12]
   b4714:	9301      	str	r3, [sp, #4]
   b4716:	bd08      	pop	{r3, pc}
   b4718:	00030218 	.word	0x00030218

000b471c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b471c:	b508      	push	{r3, lr}
   b471e:	4b02      	ldr	r3, [pc, #8]	; (b4728 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4720:	681b      	ldr	r3, [r3, #0]
   b4722:	695b      	ldr	r3, [r3, #20]
   b4724:	9301      	str	r3, [sp, #4]
   b4726:	bd08      	pop	{r3, pc}
   b4728:	00030218 	.word	0x00030218

000b472c <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b472c:	b508      	push	{r3, lr}
   b472e:	4b02      	ldr	r3, [pc, #8]	; (b4738 <hal_timer_millis+0xc>)
   b4730:	681b      	ldr	r3, [r3, #0]
   b4732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b4734:	9301      	str	r3, [sp, #4]
   b4736:	bd08      	pop	{r3, pc}
   b4738:	00030218 	.word	0x00030218

000b473c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b473c:	b508      	push	{r3, lr}
   b473e:	4b02      	ldr	r3, [pc, #8]	; (b4748 <os_mutex_recursive_create+0xc>)
   b4740:	681b      	ldr	r3, [r3, #0]
   b4742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4744:	9301      	str	r3, [sp, #4]
   b4746:	bd08      	pop	{r3, pc}
   b4748:	00030248 	.word	0x00030248

000b474c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b474c:	b508      	push	{r3, lr}
   b474e:	4b02      	ldr	r3, [pc, #8]	; (b4758 <inet_inet_ntop+0xc>)
   b4750:	681b      	ldr	r3, [r3, #0]
   b4752:	695b      	ldr	r3, [r3, #20]
   b4754:	9301      	str	r3, [sp, #4]
   b4756:	bd08      	pop	{r3, pc}
   b4758:	00030264 	.word	0x00030264

000b475c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b475c:	b508      	push	{r3, lr}
   b475e:	4b02      	ldr	r3, [pc, #8]	; (b4768 <inet_htonl+0xc>)
   b4760:	681b      	ldr	r3, [r3, #0]
   b4762:	6a1b      	ldr	r3, [r3, #32]
   b4764:	9301      	str	r3, [sp, #4]
   b4766:	bd08      	pop	{r3, pc}
   b4768:	00030264 	.word	0x00030264

000b476c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b476c:	b508      	push	{r3, lr}
   b476e:	4b02      	ldr	r3, [pc, #8]	; (b4778 <inet_htons+0xc>)
   b4770:	681b      	ldr	r3, [r3, #0]
   b4772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4774:	9301      	str	r3, [sp, #4]
   b4776:	bd08      	pop	{r3, pc}
   b4778:	00030264 	.word	0x00030264

000b477c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b477c:	b508      	push	{r3, lr}
   b477e:	4b02      	ldr	r3, [pc, #8]	; (b4788 <hal_usart_write+0xc>)
   b4780:	681b      	ldr	r3, [r3, #0]
   b4782:	68db      	ldr	r3, [r3, #12]
   b4784:	9301      	str	r3, [sp, #4]
   b4786:	bd08      	pop	{r3, pc}
   b4788:	0003023c 	.word	0x0003023c

000b478c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b478c:	b508      	push	{r3, lr}
   b478e:	4b02      	ldr	r3, [pc, #8]	; (b4798 <hal_usart_available+0xc>)
   b4790:	681b      	ldr	r3, [r3, #0]
   b4792:	691b      	ldr	r3, [r3, #16]
   b4794:	9301      	str	r3, [sp, #4]
   b4796:	bd08      	pop	{r3, pc}
   b4798:	0003023c 	.word	0x0003023c

000b479c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b479c:	b508      	push	{r3, lr}
   b479e:	4b02      	ldr	r3, [pc, #8]	; (b47a8 <hal_usart_read+0xc>)
   b47a0:	681b      	ldr	r3, [r3, #0]
   b47a2:	695b      	ldr	r3, [r3, #20]
   b47a4:	9301      	str	r3, [sp, #4]
   b47a6:	bd08      	pop	{r3, pc}
   b47a8:	0003023c 	.word	0x0003023c

000b47ac <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b47ac:	b508      	push	{r3, lr}
   b47ae:	4b02      	ldr	r3, [pc, #8]	; (b47b8 <hal_usart_peek+0xc>)
   b47b0:	681b      	ldr	r3, [r3, #0]
   b47b2:	699b      	ldr	r3, [r3, #24]
   b47b4:	9301      	str	r3, [sp, #4]
   b47b6:	bd08      	pop	{r3, pc}
   b47b8:	0003023c 	.word	0x0003023c

000b47bc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b47bc:	b508      	push	{r3, lr}
   b47be:	4b02      	ldr	r3, [pc, #8]	; (b47c8 <hal_usart_flush+0xc>)
   b47c0:	681b      	ldr	r3, [r3, #0]
   b47c2:	69db      	ldr	r3, [r3, #28]
   b47c4:	9301      	str	r3, [sp, #4]
   b47c6:	bd08      	pop	{r3, pc}
   b47c8:	0003023c 	.word	0x0003023c

000b47cc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b47cc:	b508      	push	{r3, lr}
   b47ce:	4b02      	ldr	r3, [pc, #8]	; (b47d8 <hal_usart_is_enabled+0xc>)
   b47d0:	681b      	ldr	r3, [r3, #0]
   b47d2:	6a1b      	ldr	r3, [r3, #32]
   b47d4:	9301      	str	r3, [sp, #4]
   b47d6:	bd08      	pop	{r3, pc}
   b47d8:	0003023c 	.word	0x0003023c

000b47dc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b47dc:	b508      	push	{r3, lr}
   b47de:	4b02      	ldr	r3, [pc, #8]	; (b47e8 <hal_usart_available_data_for_write+0xc>)
   b47e0:	681b      	ldr	r3, [r3, #0]
   b47e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b47e4:	9301      	str	r3, [sp, #4]
   b47e6:	bd08      	pop	{r3, pc}
   b47e8:	0003023c 	.word	0x0003023c

000b47ec <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b47ec:	b508      	push	{r3, lr}
   b47ee:	4b02      	ldr	r3, [pc, #8]	; (b47f8 <hal_usart_init_ex+0xc>)
   b47f0:	681b      	ldr	r3, [r3, #0]
   b47f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b47f4:	9301      	str	r3, [sp, #4]
   b47f6:	bd08      	pop	{r3, pc}
   b47f8:	0003023c 	.word	0x0003023c

000b47fc <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b47fc:	b508      	push	{r3, lr}
   b47fe:	4b02      	ldr	r3, [pc, #8]	; (b4808 <hal_i2c_write+0xc>)
   b4800:	681b      	ldr	r3, [r3, #0]
   b4802:	6a1b      	ldr	r3, [r3, #32]
   b4804:	9301      	str	r3, [sp, #4]
   b4806:	bd08      	pop	{r3, pc}
   b4808:	00030228 	.word	0x00030228

000b480c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b480c:	b508      	push	{r3, lr}
   b480e:	4b02      	ldr	r3, [pc, #8]	; (b4818 <hal_i2c_available+0xc>)
   b4810:	681b      	ldr	r3, [r3, #0]
   b4812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4814:	9301      	str	r3, [sp, #4]
   b4816:	bd08      	pop	{r3, pc}
   b4818:	00030228 	.word	0x00030228

000b481c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b481c:	b508      	push	{r3, lr}
   b481e:	4b02      	ldr	r3, [pc, #8]	; (b4828 <hal_i2c_read+0xc>)
   b4820:	681b      	ldr	r3, [r3, #0]
   b4822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4824:	9301      	str	r3, [sp, #4]
   b4826:	bd08      	pop	{r3, pc}
   b4828:	00030228 	.word	0x00030228

000b482c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b482c:	b508      	push	{r3, lr}
   b482e:	4b02      	ldr	r3, [pc, #8]	; (b4838 <hal_i2c_peek+0xc>)
   b4830:	681b      	ldr	r3, [r3, #0]
   b4832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4834:	9301      	str	r3, [sp, #4]
   b4836:	bd08      	pop	{r3, pc}
   b4838:	00030228 	.word	0x00030228

000b483c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b483c:	b508      	push	{r3, lr}
   b483e:	4b02      	ldr	r3, [pc, #8]	; (b4848 <hal_i2c_flush+0xc>)
   b4840:	681b      	ldr	r3, [r3, #0]
   b4842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4844:	9301      	str	r3, [sp, #4]
   b4846:	bd08      	pop	{r3, pc}
   b4848:	00030228 	.word	0x00030228

000b484c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b484c:	b508      	push	{r3, lr}
   b484e:	4b02      	ldr	r3, [pc, #8]	; (b4858 <hal_i2c_is_enabled+0xc>)
   b4850:	681b      	ldr	r3, [r3, #0]
   b4852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4854:	9301      	str	r3, [sp, #4]
   b4856:	bd08      	pop	{r3, pc}
   b4858:	00030228 	.word	0x00030228

000b485c <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b485c:	b508      	push	{r3, lr}
   b485e:	4b02      	ldr	r3, [pc, #8]	; (b4868 <hal_i2c_init+0xc>)
   b4860:	681b      	ldr	r3, [r3, #0]
   b4862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4864:	9301      	str	r3, [sp, #4]
   b4866:	bd08      	pop	{r3, pc}
   b4868:	00030228 	.word	0x00030228

000b486c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b486c:	b508      	push	{r3, lr}
   b486e:	4b02      	ldr	r3, [pc, #8]	; (b4878 <sock_setsockopt+0xc>)
   b4870:	681b      	ldr	r3, [r3, #0]
   b4872:	699b      	ldr	r3, [r3, #24]
   b4874:	9301      	str	r3, [sp, #4]
   b4876:	bd08      	pop	{r3, pc}
   b4878:	00030238 	.word	0x00030238

000b487c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b487c:	b508      	push	{r3, lr}
   b487e:	4b02      	ldr	r3, [pc, #8]	; (b4888 <sock_close+0xc>)
   b4880:	681b      	ldr	r3, [r3, #0]
   b4882:	69db      	ldr	r3, [r3, #28]
   b4884:	9301      	str	r3, [sp, #4]
   b4886:	bd08      	pop	{r3, pc}
   b4888:	00030238 	.word	0x00030238

000b488c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b488c:	b508      	push	{r3, lr}
   b488e:	4b02      	ldr	r3, [pc, #8]	; (b4898 <sock_connect+0xc>)
   b4890:	681b      	ldr	r3, [r3, #0]
   b4892:	6a1b      	ldr	r3, [r3, #32]
   b4894:	9301      	str	r3, [sp, #4]
   b4896:	bd08      	pop	{r3, pc}
   b4898:	00030238 	.word	0x00030238

000b489c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b489c:	b508      	push	{r3, lr}
   b489e:	4b02      	ldr	r3, [pc, #8]	; (b48a8 <sock_recv+0xc>)
   b48a0:	681b      	ldr	r3, [r3, #0]
   b48a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b48a4:	9301      	str	r3, [sp, #4]
   b48a6:	bd08      	pop	{r3, pc}
   b48a8:	00030238 	.word	0x00030238

000b48ac <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b48ac:	b508      	push	{r3, lr}
   b48ae:	4b02      	ldr	r3, [pc, #8]	; (b48b8 <sock_send+0xc>)
   b48b0:	681b      	ldr	r3, [r3, #0]
   b48b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b48b4:	9301      	str	r3, [sp, #4]
   b48b6:	bd08      	pop	{r3, pc}
   b48b8:	00030238 	.word	0x00030238

000b48bc <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b48bc:	b508      	push	{r3, lr}
   b48be:	4b02      	ldr	r3, [pc, #8]	; (b48c8 <sock_socket+0xc>)
   b48c0:	681b      	ldr	r3, [r3, #0]
   b48c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b48c4:	9301      	str	r3, [sp, #4]
   b48c6:	bd08      	pop	{r3, pc}
   b48c8:	00030238 	.word	0x00030238

000b48cc <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b48cc:	b508      	push	{r3, lr}
   b48ce:	4b02      	ldr	r3, [pc, #8]	; (b48d8 <hal_spi_init+0xc>)
   b48d0:	681b      	ldr	r3, [r3, #0]
   b48d2:	69db      	ldr	r3, [r3, #28]
   b48d4:	9301      	str	r3, [sp, #4]
   b48d6:	bd08      	pop	{r3, pc}
   b48d8:	00030230 	.word	0x00030230

000b48dc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b48dc:	b508      	push	{r3, lr}
   b48de:	4b02      	ldr	r3, [pc, #8]	; (b48e8 <hal_spi_is_enabled+0xc>)
   b48e0:	681b      	ldr	r3, [r3, #0]
   b48e2:	6a1b      	ldr	r3, [r3, #32]
   b48e4:	9301      	str	r3, [sp, #4]
   b48e6:	bd08      	pop	{r3, pc}
   b48e8:	00030230 	.word	0x00030230

000b48ec <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b48ec:	b508      	push	{r3, lr}
   b48ee:	4b02      	ldr	r3, [pc, #8]	; (b48f8 <HAL_USB_USART_Init+0xc>)
   b48f0:	681b      	ldr	r3, [r3, #0]
   b48f2:	681b      	ldr	r3, [r3, #0]
   b48f4:	9301      	str	r3, [sp, #4]
   b48f6:	bd08      	pop	{r3, pc}
   b48f8:	0003024c 	.word	0x0003024c

000b48fc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b48fc:	b508      	push	{r3, lr}
   b48fe:	4b02      	ldr	r3, [pc, #8]	; (b4908 <HAL_USB_USART_Begin+0xc>)
   b4900:	681b      	ldr	r3, [r3, #0]
   b4902:	685b      	ldr	r3, [r3, #4]
   b4904:	9301      	str	r3, [sp, #4]
   b4906:	bd08      	pop	{r3, pc}
   b4908:	0003024c 	.word	0x0003024c

000b490c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b490c:	b508      	push	{r3, lr}
   b490e:	4b02      	ldr	r3, [pc, #8]	; (b4918 <HAL_USB_USART_Available_Data+0xc>)
   b4910:	681b      	ldr	r3, [r3, #0]
   b4912:	691b      	ldr	r3, [r3, #16]
   b4914:	9301      	str	r3, [sp, #4]
   b4916:	bd08      	pop	{r3, pc}
   b4918:	0003024c 	.word	0x0003024c

000b491c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b491c:	b508      	push	{r3, lr}
   b491e:	4b02      	ldr	r3, [pc, #8]	; (b4928 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4920:	681b      	ldr	r3, [r3, #0]
   b4922:	695b      	ldr	r3, [r3, #20]
   b4924:	9301      	str	r3, [sp, #4]
   b4926:	bd08      	pop	{r3, pc}
   b4928:	0003024c 	.word	0x0003024c

000b492c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b492c:	b508      	push	{r3, lr}
   b492e:	4b02      	ldr	r3, [pc, #8]	; (b4938 <HAL_USB_USART_Receive_Data+0xc>)
   b4930:	681b      	ldr	r3, [r3, #0]
   b4932:	699b      	ldr	r3, [r3, #24]
   b4934:	9301      	str	r3, [sp, #4]
   b4936:	bd08      	pop	{r3, pc}
   b4938:	0003024c 	.word	0x0003024c

000b493c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b493c:	b508      	push	{r3, lr}
   b493e:	4b02      	ldr	r3, [pc, #8]	; (b4948 <HAL_USB_USART_Send_Data+0xc>)
   b4940:	681b      	ldr	r3, [r3, #0]
   b4942:	69db      	ldr	r3, [r3, #28]
   b4944:	9301      	str	r3, [sp, #4]
   b4946:	bd08      	pop	{r3, pc}
   b4948:	0003024c 	.word	0x0003024c

000b494c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b494c:	b508      	push	{r3, lr}
   b494e:	4b02      	ldr	r3, [pc, #8]	; (b4958 <HAL_USB_USART_Flush_Data+0xc>)
   b4950:	681b      	ldr	r3, [r3, #0]
   b4952:	6a1b      	ldr	r3, [r3, #32]
   b4954:	9301      	str	r3, [sp, #4]
   b4956:	bd08      	pop	{r3, pc}
   b4958:	0003024c 	.word	0x0003024c

000b495c <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b495c:	b508      	push	{r3, lr}
   b495e:	4b02      	ldr	r3, [pc, #8]	; (b4968 <HAL_USB_USART_Is_Connected+0xc>)
   b4960:	681b      	ldr	r3, [r3, #0]
   b4962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4964:	9301      	str	r3, [sp, #4]
   b4966:	bd08      	pop	{r3, pc}
   b4968:	0003024c 	.word	0x0003024c

000b496c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b496c:	b508      	push	{r3, lr}
   b496e:	4b02      	ldr	r3, [pc, #8]	; (b4978 <panic_+0xc>)
   b4970:	681b      	ldr	r3, [r3, #0]
   b4972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4974:	9301      	str	r3, [sp, #4]
   b4976:	bd08      	pop	{r3, pc}
   b4978:	00030260 	.word	0x00030260

000b497c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b497c:	b508      	push	{r3, lr}
   b497e:	4b02      	ldr	r3, [pc, #8]	; (b4988 <log_message+0xc>)
   b4980:	681b      	ldr	r3, [r3, #0]
   b4982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4984:	9301      	str	r3, [sp, #4]
   b4986:	bd08      	pop	{r3, pc}
   b4988:	00030260 	.word	0x00030260

000b498c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b498c:	b508      	push	{r3, lr}
   b498e:	4b02      	ldr	r3, [pc, #8]	; (b4998 <set_system_mode+0xc>)
   b4990:	681b      	ldr	r3, [r3, #0]
   b4992:	685b      	ldr	r3, [r3, #4]
   b4994:	9301      	str	r3, [sp, #4]
   b4996:	bd08      	pop	{r3, pc}
   b4998:	00030220 	.word	0x00030220

000b499c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b499c:	b508      	push	{r3, lr}
   b499e:	4b02      	ldr	r3, [pc, #8]	; (b49a8 <system_delay_ms+0xc>)
   b49a0:	681b      	ldr	r3, [r3, #0]
   b49a2:	695b      	ldr	r3, [r3, #20]
   b49a4:	9301      	str	r3, [sp, #4]
   b49a6:	bd08      	pop	{r3, pc}
   b49a8:	00030220 	.word	0x00030220

000b49ac <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b49ac:	b508      	push	{r3, lr}
   b49ae:	4b03      	ldr	r3, [pc, #12]	; (b49bc <system_ctrl_set_app_request_handler+0x10>)
   b49b0:	681b      	ldr	r3, [r3, #0]
   b49b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b49b6:	9301      	str	r3, [sp, #4]
   b49b8:	bd08      	pop	{r3, pc}
   b49ba:	0000      	.short	0x0000
   b49bc:	00030220 	.word	0x00030220

000b49c0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b49c0:	b508      	push	{r3, lr}
   b49c2:	4b03      	ldr	r3, [pc, #12]	; (b49d0 <system_ctrl_set_result+0x10>)
   b49c4:	681b      	ldr	r3, [r3, #0]
   b49c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b49ca:	9301      	str	r3, [sp, #4]
   b49cc:	bd08      	pop	{r3, pc}
   b49ce:	0000      	.short	0x0000
   b49d0:	00030220 	.word	0x00030220

000b49d4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b49d4:	b508      	push	{r3, lr}
   b49d6:	4b02      	ldr	r3, [pc, #8]	; (b49e0 <network_connect+0xc>)
   b49d8:	681b      	ldr	r3, [r3, #0]
   b49da:	685b      	ldr	r3, [r3, #4]
   b49dc:	9301      	str	r3, [sp, #4]
   b49de:	bd08      	pop	{r3, pc}
   b49e0:	00030240 	.word	0x00030240

000b49e4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b49e4:	b508      	push	{r3, lr}
   b49e6:	4b02      	ldr	r3, [pc, #8]	; (b49f0 <network_connecting+0xc>)
   b49e8:	681b      	ldr	r3, [r3, #0]
   b49ea:	689b      	ldr	r3, [r3, #8]
   b49ec:	9301      	str	r3, [sp, #4]
   b49ee:	bd08      	pop	{r3, pc}
   b49f0:	00030240 	.word	0x00030240

000b49f4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b49f4:	b508      	push	{r3, lr}
   b49f6:	4b02      	ldr	r3, [pc, #8]	; (b4a00 <network_disconnect+0xc>)
   b49f8:	681b      	ldr	r3, [r3, #0]
   b49fa:	68db      	ldr	r3, [r3, #12]
   b49fc:	9301      	str	r3, [sp, #4]
   b49fe:	bd08      	pop	{r3, pc}
   b4a00:	00030240 	.word	0x00030240

000b4a04 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4a04:	b508      	push	{r3, lr}
   b4a06:	4b02      	ldr	r3, [pc, #8]	; (b4a10 <network_ready+0xc>)
   b4a08:	681b      	ldr	r3, [r3, #0]
   b4a0a:	691b      	ldr	r3, [r3, #16]
   b4a0c:	9301      	str	r3, [sp, #4]
   b4a0e:	bd08      	pop	{r3, pc}
   b4a10:	00030240 	.word	0x00030240

000b4a14 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4a14:	b508      	push	{r3, lr}
   b4a16:	4b02      	ldr	r3, [pc, #8]	; (b4a20 <network_on+0xc>)
   b4a18:	681b      	ldr	r3, [r3, #0]
   b4a1a:	695b      	ldr	r3, [r3, #20]
   b4a1c:	9301      	str	r3, [sp, #4]
   b4a1e:	bd08      	pop	{r3, pc}
   b4a20:	00030240 	.word	0x00030240

000b4a24 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4a24:	b508      	push	{r3, lr}
   b4a26:	4b02      	ldr	r3, [pc, #8]	; (b4a30 <network_off+0xc>)
   b4a28:	681b      	ldr	r3, [r3, #0]
   b4a2a:	699b      	ldr	r3, [r3, #24]
   b4a2c:	9301      	str	r3, [sp, #4]
   b4a2e:	bd08      	pop	{r3, pc}
   b4a30:	00030240 	.word	0x00030240

000b4a34 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4a34:	b508      	push	{r3, lr}
   b4a36:	4b02      	ldr	r3, [pc, #8]	; (b4a40 <network_listen+0xc>)
   b4a38:	681b      	ldr	r3, [r3, #0]
   b4a3a:	69db      	ldr	r3, [r3, #28]
   b4a3c:	9301      	str	r3, [sp, #4]
   b4a3e:	bd08      	pop	{r3, pc}
   b4a40:	00030240 	.word	0x00030240

000b4a44 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4a44:	b508      	push	{r3, lr}
   b4a46:	4b02      	ldr	r3, [pc, #8]	; (b4a50 <network_listening+0xc>)
   b4a48:	681b      	ldr	r3, [r3, #0]
   b4a4a:	6a1b      	ldr	r3, [r3, #32]
   b4a4c:	9301      	str	r3, [sp, #4]
   b4a4e:	bd08      	pop	{r3, pc}
   b4a50:	00030240 	.word	0x00030240

000b4a54 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4a54:	b508      	push	{r3, lr}
   b4a56:	4b02      	ldr	r3, [pc, #8]	; (b4a60 <network_set_listen_timeout+0xc>)
   b4a58:	681b      	ldr	r3, [r3, #0]
   b4a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4a5c:	9301      	str	r3, [sp, #4]
   b4a5e:	bd08      	pop	{r3, pc}
   b4a60:	00030240 	.word	0x00030240

000b4a64 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4a64:	b508      	push	{r3, lr}
   b4a66:	4b02      	ldr	r3, [pc, #8]	; (b4a70 <network_get_listen_timeout+0xc>)
   b4a68:	681b      	ldr	r3, [r3, #0]
   b4a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4a6c:	9301      	str	r3, [sp, #4]
   b4a6e:	bd08      	pop	{r3, pc}
   b4a70:	00030240 	.word	0x00030240

000b4a74 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4a74:	b508      	push	{r3, lr}
   b4a76:	4b02      	ldr	r3, [pc, #8]	; (b4a80 <network_is_on+0xc>)
   b4a78:	681b      	ldr	r3, [r3, #0]
   b4a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4a7c:	9301      	str	r3, [sp, #4]
   b4a7e:	bd08      	pop	{r3, pc}
   b4a80:	00030240 	.word	0x00030240

000b4a84 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4a84:	b508      	push	{r3, lr}
   b4a86:	4b02      	ldr	r3, [pc, #8]	; (b4a90 <network_is_off+0xc>)
   b4a88:	681b      	ldr	r3, [r3, #0]
   b4a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4a8c:	9301      	str	r3, [sp, #4]
   b4a8e:	bd08      	pop	{r3, pc}
   b4a90:	00030240 	.word	0x00030240

000b4a94 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b4a94:	b508      	push	{r3, lr}
   b4a96:	4b02      	ldr	r3, [pc, #8]	; (b4aa0 <spark_process+0xc>)
   b4a98:	681b      	ldr	r3, [r3, #0]
   b4a9a:	689b      	ldr	r3, [r3, #8]
   b4a9c:	9301      	str	r3, [sp, #4]
   b4a9e:	bd08      	pop	{r3, pc}
   b4aa0:	00030244 	.word	0x00030244

000b4aa4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4aa4:	b508      	push	{r3, lr}
   b4aa6:	4b02      	ldr	r3, [pc, #8]	; (b4ab0 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4aa8:	681b      	ldr	r3, [r3, #0]
   b4aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4aac:	9301      	str	r3, [sp, #4]
   b4aae:	bd08      	pop	{r3, pc}
   b4ab0:	00030244 	.word	0x00030244

000b4ab4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4ab4:	b508      	push	{r3, lr}
   b4ab6:	4b02      	ldr	r3, [pc, #8]	; (b4ac0 <malloc+0xc>)
   b4ab8:	681b      	ldr	r3, [r3, #0]
   b4aba:	681b      	ldr	r3, [r3, #0]
   b4abc:	9301      	str	r3, [sp, #4]
   b4abe:	bd08      	pop	{r3, pc}
   b4ac0:	0003021c 	.word	0x0003021c

000b4ac4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4ac4:	b508      	push	{r3, lr}
   b4ac6:	4b02      	ldr	r3, [pc, #8]	; (b4ad0 <free+0xc>)
   b4ac8:	681b      	ldr	r3, [r3, #0]
   b4aca:	685b      	ldr	r3, [r3, #4]
   b4acc:	9301      	str	r3, [sp, #4]
   b4ace:	bd08      	pop	{r3, pc}
   b4ad0:	0003021c 	.word	0x0003021c

000b4ad4 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4ad4:	b508      	push	{r3, lr}
   b4ad6:	4b02      	ldr	r3, [pc, #8]	; (b4ae0 <__errno+0xc>)
   b4ad8:	681b      	ldr	r3, [r3, #0]
   b4ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4adc:	9301      	str	r3, [sp, #4]
   b4ade:	bd08      	pop	{r3, pc}
   b4ae0:	0003021c 	.word	0x0003021c

000b4ae4 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4ae4:	b508      	push	{r3, lr}
   b4ae6:	4b02      	ldr	r3, [pc, #8]	; (b4af0 <__assert_func+0xc>)
   b4ae8:	681b      	ldr	r3, [r3, #0]
   b4aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4aec:	9301      	str	r3, [sp, #4]
   b4aee:	bd08      	pop	{r3, pc}
   b4af0:	0003021c 	.word	0x0003021c

000b4af4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4af4:	b508      	push	{r3, lr}
   b4af6:	4b02      	ldr	r3, [pc, #8]	; (b4b00 <newlib_impure_ptr_callback+0xc>)
   b4af8:	681b      	ldr	r3, [r3, #0]
   b4afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4afc:	9301      	str	r3, [sp, #4]
   b4afe:	bd08      	pop	{r3, pc}
   b4b00:	0003021c 	.word	0x0003021c

000b4b04 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4b04:	2200      	movs	r2, #0
   b4b06:	6840      	ldr	r0, [r0, #4]
   b4b08:	4611      	mov	r1, r2
   b4b0a:	f7ff bf9b 	b.w	b4a44 <network_listening>

000b4b0e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4b0e:	2200      	movs	r2, #0
   b4b10:	6840      	ldr	r0, [r0, #4]
   b4b12:	4611      	mov	r1, r2
   b4b14:	f7ff bfa6 	b.w	b4a64 <network_get_listen_timeout>

000b4b18 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4b18:	6840      	ldr	r0, [r0, #4]
   b4b1a:	2200      	movs	r2, #0
   b4b1c:	f7ff bf9a 	b.w	b4a54 <network_set_listen_timeout>

000b4b20 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4b20:	6840      	ldr	r0, [r0, #4]
   b4b22:	2200      	movs	r2, #0
   b4b24:	f081 0101 	eor.w	r1, r1, #1
   b4b28:	f7ff bf84 	b.w	b4a34 <network_listen>

000b4b2c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4b2c:	2300      	movs	r3, #0
   b4b2e:	6840      	ldr	r0, [r0, #4]
   b4b30:	461a      	mov	r2, r3
   b4b32:	4619      	mov	r1, r3
   b4b34:	f7ff bf76 	b.w	b4a24 <network_off>

000b4b38 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4b38:	2300      	movs	r3, #0
   b4b3a:	6840      	ldr	r0, [r0, #4]
   b4b3c:	461a      	mov	r2, r3
   b4b3e:	4619      	mov	r1, r3
   b4b40:	f7ff bf68 	b.w	b4a14 <network_on>

000b4b44 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4b44:	2200      	movs	r2, #0
   b4b46:	6840      	ldr	r0, [r0, #4]
   b4b48:	4611      	mov	r1, r2
   b4b4a:	f7ff bf5b 	b.w	b4a04 <network_ready>

000b4b4e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4b4e:	2200      	movs	r2, #0
   b4b50:	6840      	ldr	r0, [r0, #4]
   b4b52:	4611      	mov	r1, r2
   b4b54:	f7ff bf46 	b.w	b49e4 <network_connecting>

000b4b58 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4b58:	6840      	ldr	r0, [r0, #4]
   b4b5a:	2200      	movs	r2, #0
   b4b5c:	2102      	movs	r1, #2
   b4b5e:	f7ff bf49 	b.w	b49f4 <network_disconnect>

000b4b62 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4b62:	2300      	movs	r3, #0
   b4b64:	6840      	ldr	r0, [r0, #4]
   b4b66:	461a      	mov	r2, r3
   b4b68:	f7ff bf34 	b.w	b49d4 <network_connect>

000b4b6c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4b6c:	4b02      	ldr	r3, [pc, #8]	; (b4b78 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4b6e:	2203      	movs	r2, #3
   b4b70:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4b72:	4a02      	ldr	r2, [pc, #8]	; (b4b7c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4b74:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4b76:	4770      	bx	lr
   b4b78:	2003e6b8 	.word	0x2003e6b8
   b4b7c:	000b67c0 	.word	0x000b67c0

000b4b80 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4b80:	b510      	push	{r4, lr}
   b4b82:	4604      	mov	r4, r0
   b4b84:	4608      	mov	r0, r1
{
    _spi = spi;
   b4b86:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4b88:	f7ff fea0 	bl	b48cc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4b8c:	2300      	movs	r3, #0
   b4b8e:	6063      	str	r3, [r4, #4]
}
   b4b90:	4620      	mov	r0, r4
   b4b92:	bd10      	pop	{r4, pc}

000b4b94 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4b94:	4b05      	ldr	r3, [pc, #20]	; (b4bac <_GLOBAL__sub_I_System+0x18>)
   b4b96:	2202      	movs	r2, #2
   b4b98:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4b9a:	4b05      	ldr	r3, [pc, #20]	; (b4bb0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4b9c:	4a05      	ldr	r2, [pc, #20]	; (b4bb4 <_GLOBAL__sub_I_System+0x20>)
   b4b9e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4ba0:	2000      	movs	r0, #0
   b4ba2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4ba6:	f7ff bef1 	b.w	b498c <set_system_mode>
   b4baa:	bf00      	nop
   b4bac:	2003e6cc 	.word	0x2003e6cc
   b4bb0:	2003e6c0 	.word	0x2003e6c0
   b4bb4:	ffff0000 	.word	0xffff0000

000b4bb8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b4bb8:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b4bba:	6843      	ldr	r3, [r0, #4]
   b4bbc:	3b01      	subs	r3, #1
    {
   b4bbe:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b4bc0:	6043      	str	r3, [r0, #4]
   b4bc2:	b963      	cbnz	r3, b4bde <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b4bc4:	6803      	ldr	r3, [r0, #0]
   b4bc6:	689b      	ldr	r3, [r3, #8]
   b4bc8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4bca:	68a3      	ldr	r3, [r4, #8]
   b4bcc:	3b01      	subs	r3, #1
   b4bce:	60a3      	str	r3, [r4, #8]
   b4bd0:	b92b      	cbnz	r3, b4bde <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b4bd2:	6823      	ldr	r3, [r4, #0]
   b4bd4:	4620      	mov	r0, r4
   b4bd6:	68db      	ldr	r3, [r3, #12]
        }
    }
   b4bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4bdc:	4718      	bx	r3
    }
   b4bde:	bd10      	pop	{r4, pc}

000b4be0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4be0:	4802      	ldr	r0, [pc, #8]	; (b4bec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4be2:	2300      	movs	r3, #0
   b4be4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4be6:	f7ff bda9 	b.w	b473c <os_mutex_recursive_create>
   b4bea:	bf00      	nop
   b4bec:	2003e6d0 	.word	0x2003e6d0

000b4bf0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4bf2:	4606      	mov	r6, r0
   b4bf4:	460d      	mov	r5, r1
  size_t n = 0;
   b4bf6:	188f      	adds	r7, r1, r2
   b4bf8:	2400      	movs	r4, #0
  while (size--) {
   b4bfa:	42bd      	cmp	r5, r7
   b4bfc:	d00c      	beq.n	b4c18 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4bfe:	6833      	ldr	r3, [r6, #0]
   b4c00:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4c04:	689b      	ldr	r3, [r3, #8]
   b4c06:	4630      	mov	r0, r6
   b4c08:	4798      	blx	r3
     if (chunk>=0)
   b4c0a:	1e03      	subs	r3, r0, #0
   b4c0c:	db01      	blt.n	b4c12 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4c0e:	441c      	add	r4, r3
  while (size--) {
   b4c10:	e7f3      	b.n	b4bfa <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4c12:	2c00      	cmp	r4, #0
   b4c14:	bf08      	it	eq
   b4c16:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4c18:	4620      	mov	r0, r4
   b4c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4c1c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b4c1c:	b513      	push	{r0, r1, r4, lr}
   b4c1e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b4c20:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4c22:	b159      	cbz	r1, b4c3c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4c24:	9101      	str	r1, [sp, #4]
   b4c26:	f001 fce7 	bl	b65f8 <strlen>
   b4c2a:	6823      	ldr	r3, [r4, #0]
   b4c2c:	9901      	ldr	r1, [sp, #4]
   b4c2e:	68db      	ldr	r3, [r3, #12]
   b4c30:	4602      	mov	r2, r0
   b4c32:	4620      	mov	r0, r4
    }
   b4c34:	b002      	add	sp, #8
   b4c36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4c3a:	4718      	bx	r3
    }
   b4c3c:	b002      	add	sp, #8
   b4c3e:	bd10      	pop	{r4, pc}

000b4c40 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4c40:	6803      	ldr	r3, [r0, #0]
   b4c42:	689b      	ldr	r3, [r3, #8]
   b4c44:	4718      	bx	r3

000b4c46 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4c46:	b530      	push	{r4, r5, lr}
   b4c48:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4c4a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4c4c:	2a01      	cmp	r2, #1
  *str = '\0';
   b4c4e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4c52:	bf98      	it	ls
   b4c54:	220a      	movls	r2, #10
   b4c56:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4c58:	460d      	mov	r5, r1
   b4c5a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4c5e:	fb01 5312 	mls	r3, r1, r2, r5
   b4c62:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4c66:	2b09      	cmp	r3, #9
   b4c68:	bf94      	ite	ls
   b4c6a:	3330      	addls	r3, #48	; 0x30
   b4c6c:	3337      	addhi	r3, #55	; 0x37
   b4c6e:	b2db      	uxtb	r3, r3
  } while(n);
   b4c70:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4c72:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4c76:	d9ef      	bls.n	b4c58 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4c78:	4621      	mov	r1, r4
   b4c7a:	f7ff ffcf 	bl	b4c1c <_ZN5Print5writeEPKc>
}
   b4c7e:	b00b      	add	sp, #44	; 0x2c
   b4c80:	bd30      	pop	{r4, r5, pc}
	...

000b4c84 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4c84:	4b01      	ldr	r3, [pc, #4]	; (b4c8c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4c86:	4a02      	ldr	r2, [pc, #8]	; (b4c90 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4c88:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4c8a:	4770      	bx	lr
   b4c8c:	2003e6d4 	.word	0x2003e6d4
   b4c90:	000b67fc 	.word	0x000b67fc

000b4c94 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4c94:	4b02      	ldr	r3, [pc, #8]	; (b4ca0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4c96:	681a      	ldr	r2, [r3, #0]
   b4c98:	4b02      	ldr	r3, [pc, #8]	; (b4ca4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4c9a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4c9c:	4770      	bx	lr
   b4c9e:	bf00      	nop
   b4ca0:	2003e504 	.word	0x2003e504
   b4ca4:	2003e6d8 	.word	0x2003e6d8

000b4ca8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4ca8:	2100      	movs	r1, #0
   b4caa:	f7ff be77 	b.w	b499c <system_delay_ms>
	...

000b4cb0 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b4cb0:	b510      	push	{r4, lr}
   b4cb2:	4b04      	ldr	r3, [pc, #16]	; (b4cc4 <_ZN9TCPClientD1Ev+0x14>)
   b4cb4:	6003      	str	r3, [r0, #0]
   b4cb6:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b4cb8:	6980      	ldr	r0, [r0, #24]
   b4cba:	b108      	cbz	r0, b4cc0 <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b4cbc:	f7ff ff7c 	bl	b4bb8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b4cc0:	4620      	mov	r0, r4
   b4cc2:	bd10      	pop	{r4, pc}
   b4cc4:	000b68f4 	.word	0x000b68f4

000b4cc8 <_ZN9TCPClientD0Ev>:
   b4cc8:	b510      	push	{r4, lr}
   b4cca:	4604      	mov	r4, r0
   b4ccc:	f7ff fff0 	bl	b4cb0 <_ZN9TCPClientD1Ev>
   b4cd0:	4620      	mov	r0, r4
   b4cd2:	211c      	movs	r1, #28
   b4cd4:	f7ff f9e3 	bl	b409e <_ZdlPvj>
   b4cd8:	4620      	mov	r0, r4
   b4cda:	bd10      	pop	{r4, pc}

000b4cdc <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b4cdc:	4b01      	ldr	r3, [pc, #4]	; (b4ce4 <_GLOBAL__sub_I_RGB+0x8>)
   b4cde:	2200      	movs	r2, #0
   b4ce0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4ce2:	4770      	bx	lr
   b4ce4:	2003e6dc 	.word	0x2003e6dc

000b4ce8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4ce8:	4b01      	ldr	r3, [pc, #4]	; (b4cf0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b4cea:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b4cec:	4770      	bx	lr
   b4cee:	bf00      	nop
   b4cf0:	2003e508 	.word	0x2003e508

000b4cf4 <serialEventRun>:
{
   b4cf4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4cf6:	4b0b      	ldr	r3, [pc, #44]	; (b4d24 <serialEventRun+0x30>)
   b4cf8:	b143      	cbz	r3, b4d0c <serialEventRun+0x18>
   b4cfa:	f000 f981 	bl	b5000 <_Z16_fetch_usbserialv>
   b4cfe:	6803      	ldr	r3, [r0, #0]
   b4d00:	691b      	ldr	r3, [r3, #16]
   b4d02:	4798      	blx	r3
   b4d04:	2800      	cmp	r0, #0
   b4d06:	dd01      	ble.n	b4d0c <serialEventRun+0x18>
        serialEvent();
   b4d08:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b4d0c:	4b06      	ldr	r3, [pc, #24]	; (b4d28 <serialEventRun+0x34>)
   b4d0e:	b143      	cbz	r3, b4d22 <serialEventRun+0x2e>
   b4d10:	f000 feb0 	bl	b5a74 <_Z22__fetch_global_Serial1v>
   b4d14:	6803      	ldr	r3, [r0, #0]
   b4d16:	691b      	ldr	r3, [r3, #16]
   b4d18:	4798      	blx	r3
   b4d1a:	2800      	cmp	r0, #0
   b4d1c:	dd01      	ble.n	b4d22 <serialEventRun+0x2e>
        serialEvent1();
   b4d1e:	f3af 8000 	nop.w
}
   b4d22:	bd08      	pop	{r3, pc}
	...

000b4d2c <_post_loop>:
{
   b4d2c:	b508      	push	{r3, lr}
	serialEventRun();
   b4d2e:	f7ff ffe1 	bl	b4cf4 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4d32:	f7ff fcf3 	bl	b471c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4d36:	4b01      	ldr	r3, [pc, #4]	; (b4d3c <_post_loop+0x10>)
   b4d38:	6018      	str	r0, [r3, #0]
}
   b4d3a:	bd08      	pop	{r3, pc}
   b4d3c:	2003e740 	.word	0x2003e740

000b4d40 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4d40:	4805      	ldr	r0, [pc, #20]	; (b4d58 <_Z33system_initialize_user_backup_ramv+0x18>)
   b4d42:	4a06      	ldr	r2, [pc, #24]	; (b4d5c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b4d44:	4906      	ldr	r1, [pc, #24]	; (b4d60 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b4d46:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4d48:	1a12      	subs	r2, r2, r0
   b4d4a:	f001 fbff 	bl	b654c <memcpy>
    __backup_sram_signature = signature;
   b4d4e:	4b05      	ldr	r3, [pc, #20]	; (b4d64 <_Z33system_initialize_user_backup_ramv+0x24>)
   b4d50:	4a05      	ldr	r2, [pc, #20]	; (b4d68 <_Z33system_initialize_user_backup_ramv+0x28>)
   b4d52:	601a      	str	r2, [r3, #0]
}
   b4d54:	bd08      	pop	{r3, pc}
   b4d56:	bf00      	nop
   b4d58:	2003f400 	.word	0x2003f400
   b4d5c:	2003f404 	.word	0x2003f404
   b4d60:	000b6b84 	.word	0x000b6b84
   b4d64:	2003f400 	.word	0x2003f400
   b4d68:	9a271c1e 	.word	0x9a271c1e

000b4d6c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b4d6c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4d6e:	2300      	movs	r3, #0
   b4d70:	9300      	str	r3, [sp, #0]
   b4d72:	461a      	mov	r2, r3
   b4d74:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4d78:	f7ff fe22 	bl	b49c0 <system_ctrl_set_result>
}
   b4d7c:	b003      	add	sp, #12
   b4d7e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4d84 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b4d84:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b4d86:	8843      	ldrh	r3, [r0, #2]
   b4d88:	2b0a      	cmp	r3, #10
   b4d8a:	d008      	beq.n	b4d9e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b4d8c:	2b50      	cmp	r3, #80	; 0x50
   b4d8e:	d10b      	bne.n	b4da8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b4d90:	4b09      	ldr	r3, [pc, #36]	; (b4db8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b4d92:	681b      	ldr	r3, [r3, #0]
   b4d94:	b14b      	cbz	r3, b4daa <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b4d96:	b003      	add	sp, #12
   b4d98:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4d9c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b4d9e:	f7ff ffe5 	bl	b4d6c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b4da2:	b003      	add	sp, #12
   b4da4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4da8:	2300      	movs	r3, #0
   b4daa:	9300      	str	r3, [sp, #0]
   b4dac:	461a      	mov	r2, r3
   b4dae:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4db2:	f7ff fe05 	bl	b49c0 <system_ctrl_set_result>
}
   b4db6:	e7f4      	b.n	b4da2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b4db8:	2003e6f0 	.word	0x2003e6f0

000b4dbc <module_user_init_hook>:
{
   b4dbc:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b4dbe:	4812      	ldr	r0, [pc, #72]	; (b4e08 <module_user_init_hook+0x4c>)
   b4dc0:	2100      	movs	r1, #0
   b4dc2:	f7ff fe97 	bl	b4af4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4dc6:	4b11      	ldr	r3, [pc, #68]	; (b4e0c <module_user_init_hook+0x50>)
   b4dc8:	681a      	ldr	r2, [r3, #0]
   b4dca:	4b11      	ldr	r3, [pc, #68]	; (b4e10 <module_user_init_hook+0x54>)
   b4dcc:	429a      	cmp	r2, r3
   b4dce:	4b11      	ldr	r3, [pc, #68]	; (b4e14 <module_user_init_hook+0x58>)
   b4dd0:	bf0c      	ite	eq
   b4dd2:	2201      	moveq	r2, #1
   b4dd4:	2200      	movne	r2, #0
   b4dd6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4dd8:	d001      	beq.n	b4dde <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b4dda:	f7ff ffb1 	bl	b4d40 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b4dde:	f7ff fc8d 	bl	b46fc <HAL_RNG_GetRandomNumber>
   b4de2:	4604      	mov	r4, r0
    srand(seed);
   b4de4:	f001 fbc8 	bl	b6578 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b4de8:	4b0b      	ldr	r3, [pc, #44]	; (b4e18 <module_user_init_hook+0x5c>)
   b4dea:	b113      	cbz	r3, b4df2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b4dec:	4620      	mov	r0, r4
   b4dee:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b4df2:	2100      	movs	r1, #0
   b4df4:	4808      	ldr	r0, [pc, #32]	; (b4e18 <module_user_init_hook+0x5c>)
   b4df6:	f7ff fe55 	bl	b4aa4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b4dfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b4dfe:	4807      	ldr	r0, [pc, #28]	; (b4e1c <module_user_init_hook+0x60>)
   b4e00:	2100      	movs	r1, #0
   b4e02:	f7ff bdd3 	b.w	b49ac <system_ctrl_set_app_request_handler>
   b4e06:	bf00      	nop
   b4e08:	000b4ce9 	.word	0x000b4ce9
   b4e0c:	2003f400 	.word	0x2003f400
   b4e10:	9a271c1e 	.word	0x9a271c1e
   b4e14:	2003e6ec 	.word	0x2003e6ec
   b4e18:	00000000 	.word	0x00000000
   b4e1c:	000b4d85 	.word	0x000b4d85

000b4e20 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4e20:	4770      	bx	lr

000b4e22 <_ZN9IPAddressD0Ev>:
   b4e22:	b510      	push	{r4, lr}
   b4e24:	2118      	movs	r1, #24
   b4e26:	4604      	mov	r4, r0
   b4e28:	f7ff f939 	bl	b409e <_ZdlPvj>
   b4e2c:	4620      	mov	r0, r4
   b4e2e:	bd10      	pop	{r4, pc}

000b4e30 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4e30:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4e32:	7d03      	ldrb	r3, [r0, #20]
   b4e34:	2b06      	cmp	r3, #6
{
   b4e36:	b08d      	sub	sp, #52	; 0x34
   b4e38:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4e3a:	f100 0704 	add.w	r7, r0, #4
   b4e3e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4e42:	d012      	beq.n	b4e6a <_ZNK9IPAddress7printToER5Print+0x3a>
   b4e44:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4e48:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4e4c:	220a      	movs	r2, #10
   b4e4e:	4630      	mov	r0, r6
   b4e50:	f7ff fef9 	bl	b4c46 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4e54:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4e56:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4e58:	d019      	beq.n	b4e8e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4e5a:	2c00      	cmp	r4, #0
   b4e5c:	d0f4      	beq.n	b4e48 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4e5e:	212e      	movs	r1, #46	; 0x2e
   b4e60:	4630      	mov	r0, r6
   b4e62:	f7ff feed 	bl	b4c40 <_ZN5Print5printEc>
   b4e66:	4404      	add	r4, r0
   b4e68:	e7ee      	b.n	b4e48 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4e6a:	232f      	movs	r3, #47	; 0x2f
   b4e6c:	466a      	mov	r2, sp
   b4e6e:	4639      	mov	r1, r7
   b4e70:	200a      	movs	r0, #10
		buf[0] = 0;
   b4e72:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4e76:	f7ff fc69 	bl	b474c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4e7a:	4668      	mov	r0, sp
   b4e7c:	f001 fbbc 	bl	b65f8 <strlen>
   b4e80:	6833      	ldr	r3, [r6, #0]
   b4e82:	4602      	mov	r2, r0
   b4e84:	68db      	ldr	r3, [r3, #12]
   b4e86:	4669      	mov	r1, sp
   b4e88:	4630      	mov	r0, r6
   b4e8a:	4798      	blx	r3
   b4e8c:	4604      	mov	r4, r0
    }
    return n;
}
   b4e8e:	4620      	mov	r0, r4
   b4e90:	b00d      	add	sp, #52	; 0x34
   b4e92:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4e94 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4e94:	b510      	push	{r4, lr}
   b4e96:	4b05      	ldr	r3, [pc, #20]	; (b4eac <_ZN9IPAddressC1Ev+0x18>)
   b4e98:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4e9a:	2211      	movs	r2, #17
   b4e9c:	f840 3b04 	str.w	r3, [r0], #4
   b4ea0:	2100      	movs	r1, #0
   b4ea2:	f001 fb61 	bl	b6568 <memset>
}
   b4ea6:	4620      	mov	r0, r4
   b4ea8:	bd10      	pop	{r4, pc}
   b4eaa:	bf00      	nop
   b4eac:	000b6824 	.word	0x000b6824

000b4eb0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4eb0:	4603      	mov	r3, r0
   b4eb2:	4a07      	ldr	r2, [pc, #28]	; (b4ed0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4eb4:	b510      	push	{r4, lr}
   b4eb6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4eba:	f101 0210 	add.w	r2, r1, #16
   b4ebe:	f851 4b04 	ldr.w	r4, [r1], #4
   b4ec2:	f843 4b04 	str.w	r4, [r3], #4
   b4ec6:	4291      	cmp	r1, r2
   b4ec8:	d1f9      	bne.n	b4ebe <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4eca:	780a      	ldrb	r2, [r1, #0]
   b4ecc:	701a      	strb	r2, [r3, #0]
}
   b4ece:	bd10      	pop	{r4, pc}
   b4ed0:	000b6824 	.word	0x000b6824

000b4ed4 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b4ed4:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b4ed6:	2b04      	cmp	r3, #4
   b4ed8:	d104      	bne.n	b4ee4 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b4eda:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b4edc:	3800      	subs	r0, #0
   b4ede:	bf18      	it	ne
   b4ee0:	2001      	movne	r0, #1
   b4ee2:	4770      	bx	lr
    } else if (version() == 6) {
   b4ee4:	2b06      	cmp	r3, #6
   b4ee6:	d107      	bne.n	b4ef8 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b4ee8:	6843      	ldr	r3, [r0, #4]
   b4eea:	b93b      	cbnz	r3, b4efc <_ZNK9IPAddresscvbEv+0x28>
   b4eec:	6883      	ldr	r3, [r0, #8]
   b4eee:	b92b      	cbnz	r3, b4efc <_ZNK9IPAddresscvbEv+0x28>
   b4ef0:	68c3      	ldr	r3, [r0, #12]
   b4ef2:	b91b      	cbnz	r3, b4efc <_ZNK9IPAddresscvbEv+0x28>
   b4ef4:	6900      	ldr	r0, [r0, #16]
   b4ef6:	e7f1      	b.n	b4edc <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b4ef8:	2000      	movs	r0, #0
   b4efa:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b4efc:	2001      	movs	r0, #1
}
   b4efe:	4770      	bx	lr

000b4f00 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4f00:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4f02:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4f06:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4f0a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4f0e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4f12:	2304      	movs	r3, #4
   b4f14:	6041      	str	r1, [r0, #4]
   b4f16:	7503      	strb	r3, [r0, #20]
}
   b4f18:	bd10      	pop	{r4, pc}
	...

000b4f1c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4f1c:	b507      	push	{r0, r1, r2, lr}
   b4f1e:	4b06      	ldr	r3, [pc, #24]	; (b4f38 <_ZN9IPAddressC1EPKh+0x1c>)
   b4f20:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4f22:	78cb      	ldrb	r3, [r1, #3]
   b4f24:	9300      	str	r3, [sp, #0]
   b4f26:	788b      	ldrb	r3, [r1, #2]
   b4f28:	784a      	ldrb	r2, [r1, #1]
   b4f2a:	7809      	ldrb	r1, [r1, #0]
   b4f2c:	f7ff ffe8 	bl	b4f00 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4f30:	b003      	add	sp, #12
   b4f32:	f85d fb04 	ldr.w	pc, [sp], #4
   b4f36:	bf00      	nop
   b4f38:	000b6824 	.word	0x000b6824

000b4f3c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4f3c:	7441      	strb	r1, [r0, #17]
}
   b4f3e:	4770      	bx	lr

000b4f40 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4f40:	4770      	bx	lr

000b4f42 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b4f42:	4770      	bx	lr

000b4f44 <_ZN9USBSerial4readEv>:
{
   b4f44:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b4f46:	2100      	movs	r1, #0
   b4f48:	7c00      	ldrb	r0, [r0, #16]
   b4f4a:	f7ff fcef 	bl	b492c <HAL_USB_USART_Receive_Data>
}
   b4f4e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4f52:	bd08      	pop	{r3, pc}

000b4f54 <_ZN9USBSerial4peekEv>:
{
   b4f54:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b4f56:	2101      	movs	r1, #1
   b4f58:	7c00      	ldrb	r0, [r0, #16]
   b4f5a:	f7ff fce7 	bl	b492c <HAL_USB_USART_Receive_Data>
}
   b4f5e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4f62:	bd08      	pop	{r3, pc}

000b4f64 <_ZN9USBSerial17availableForWriteEv>:
{
   b4f64:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b4f66:	7c00      	ldrb	r0, [r0, #16]
   b4f68:	f7ff fcd8 	bl	b491c <HAL_USB_USART_Available_Data_For_Write>
}
   b4f6c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4f70:	bd08      	pop	{r3, pc}

000b4f72 <_ZN9USBSerial9availableEv>:
{
   b4f72:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b4f74:	7c00      	ldrb	r0, [r0, #16]
   b4f76:	f7ff fcc9 	bl	b490c <HAL_USB_USART_Available_Data>
}
   b4f7a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4f7e:	bd08      	pop	{r3, pc}

000b4f80 <_ZN9USBSerial5writeEh>:
{
   b4f80:	b513      	push	{r0, r1, r4, lr}
   b4f82:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4f84:	7c00      	ldrb	r0, [r0, #16]
{
   b4f86:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4f88:	f7ff fcc8 	bl	b491c <HAL_USB_USART_Available_Data_For_Write>
   b4f8c:	2800      	cmp	r0, #0
   b4f8e:	9901      	ldr	r1, [sp, #4]
   b4f90:	dc01      	bgt.n	b4f96 <_ZN9USBSerial5writeEh+0x16>
   b4f92:	7c60      	ldrb	r0, [r4, #17]
   b4f94:	b120      	cbz	r0, b4fa0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b4f96:	7c20      	ldrb	r0, [r4, #16]
   b4f98:	f7ff fcd0 	bl	b493c <HAL_USB_USART_Send_Data>
   b4f9c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b4fa0:	b002      	add	sp, #8
   b4fa2:	bd10      	pop	{r4, pc}

000b4fa4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b4fa4:	7c00      	ldrb	r0, [r0, #16]
   b4fa6:	f7ff bcd1 	b.w	b494c <HAL_USB_USART_Flush_Data>

000b4faa <_ZN9USBSerialD0Ev>:
   b4faa:	b510      	push	{r4, lr}
   b4fac:	2114      	movs	r1, #20
   b4fae:	4604      	mov	r4, r0
   b4fb0:	f7ff f875 	bl	b409e <_ZdlPvj>
   b4fb4:	4620      	mov	r0, r4
   b4fb6:	bd10      	pop	{r4, pc}

000b4fb8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b4fb8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4fbe:	4604      	mov	r4, r0
   b4fc0:	4608      	mov	r0, r1
   b4fc2:	2100      	movs	r1, #0
   b4fc4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4fc8:	4b04      	ldr	r3, [pc, #16]	; (b4fdc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b4fca:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4fcc:	2301      	movs	r3, #1
  _serial = serial;
   b4fce:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4fd0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b4fd2:	4611      	mov	r1, r2
   b4fd4:	f7ff fc8a 	bl	b48ec <HAL_USB_USART_Init>
}
   b4fd8:	4620      	mov	r0, r4
   b4fda:	bd10      	pop	{r4, pc}
   b4fdc:	000b6838 	.word	0x000b6838

000b4fe0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b4fe0:	7c00      	ldrb	r0, [r0, #16]
   b4fe2:	2200      	movs	r2, #0
   b4fe4:	f7ff bc8a 	b.w	b48fc <HAL_USB_USART_Begin>

000b4fe8 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b4fe8:	7c00      	ldrb	r0, [r0, #16]
   b4fea:	f7ff bcb7 	b.w	b495c <HAL_USB_USART_Is_Connected>

000b4fee <_Z19acquireSerialBufferv>:
{
   b4fee:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b4ff0:	2214      	movs	r2, #20
{
   b4ff2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b4ff4:	2100      	movs	r1, #0
   b4ff6:	f001 fab7 	bl	b6568 <memset>
}
   b4ffa:	4620      	mov	r0, r4
   b4ffc:	bd10      	pop	{r4, pc}
	...

000b5000 <_Z16_fetch_usbserialv>:
{
   b5000:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5002:	4c0f      	ldr	r4, [pc, #60]	; (b5040 <_Z16_fetch_usbserialv+0x40>)
{
   b5004:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5006:	a803      	add	r0, sp, #12
   b5008:	f7ff fff1 	bl	b4fee <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b500c:	7821      	ldrb	r1, [r4, #0]
   b500e:	f3bf 8f5b 	dmb	ish
   b5012:	f011 0101 	ands.w	r1, r1, #1
   b5016:	d10f      	bne.n	b5038 <_Z16_fetch_usbserialv+0x38>
   b5018:	4620      	mov	r0, r4
   b501a:	9101      	str	r1, [sp, #4]
   b501c:	f7ff f84e 	bl	b40bc <__cxa_guard_acquire>
   b5020:	9901      	ldr	r1, [sp, #4]
   b5022:	b148      	cbz	r0, b5038 <_Z16_fetch_usbserialv+0x38>
   b5024:	aa03      	add	r2, sp, #12
   b5026:	4807      	ldr	r0, [pc, #28]	; (b5044 <_Z16_fetch_usbserialv+0x44>)
   b5028:	f7ff ffc6 	bl	b4fb8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b502c:	4620      	mov	r0, r4
   b502e:	f7ff f84a 	bl	b40c6 <__cxa_guard_release>
   b5032:	4805      	ldr	r0, [pc, #20]	; (b5048 <_Z16_fetch_usbserialv+0x48>)
   b5034:	f001 fa84 	bl	b6540 <atexit>
	return _usbserial;
}
   b5038:	4802      	ldr	r0, [pc, #8]	; (b5044 <_Z16_fetch_usbserialv+0x44>)
   b503a:	b008      	add	sp, #32
   b503c:	bd10      	pop	{r4, pc}
   b503e:	bf00      	nop
   b5040:	2003e6f4 	.word	0x2003e6f4
   b5044:	2003e6f8 	.word	0x2003e6f8
   b5048:	000b4f41 	.word	0x000b4f41

000b504c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b504c:	4770      	bx	lr

000b504e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b504e:	7441      	strb	r1, [r0, #17]
}
   b5050:	4770      	bx	lr

000b5052 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5052:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5054:	7c00      	ldrb	r0, [r0, #16]
   b5056:	f7ff fbc1 	bl	b47dc <hal_usart_available_data_for_write>
}
   b505a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b505e:	bd08      	pop	{r3, pc}

000b5060 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5060:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5062:	7c00      	ldrb	r0, [r0, #16]
   b5064:	f7ff fb92 	bl	b478c <hal_usart_available>
}
   b5068:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b506c:	bd08      	pop	{r3, pc}

000b506e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b506e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5070:	7c00      	ldrb	r0, [r0, #16]
   b5072:	f7ff fb9b 	bl	b47ac <hal_usart_peek>
}
   b5076:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b507a:	bd08      	pop	{r3, pc}

000b507c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b507c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b507e:	7c00      	ldrb	r0, [r0, #16]
   b5080:	f7ff fb8c 	bl	b479c <hal_usart_read>
}
   b5084:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5088:	bd08      	pop	{r3, pc}

000b508a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b508a:	7c00      	ldrb	r0, [r0, #16]
   b508c:	f7ff bb96 	b.w	b47bc <hal_usart_flush>

000b5090 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5090:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5092:	7c45      	ldrb	r5, [r0, #17]
{
   b5094:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5096:	b12d      	cbz	r5, b50a4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5098:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b509a:	b003      	add	sp, #12
   b509c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b50a0:	f7ff bb6c 	b.w	b477c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b50a4:	7c00      	ldrb	r0, [r0, #16]
   b50a6:	9101      	str	r1, [sp, #4]
   b50a8:	f7ff fb98 	bl	b47dc <hal_usart_available_data_for_write>
   b50ac:	2800      	cmp	r0, #0
   b50ae:	9901      	ldr	r1, [sp, #4]
   b50b0:	dcf2      	bgt.n	b5098 <_ZN11USARTSerial5writeEh+0x8>
}
   b50b2:	4628      	mov	r0, r5
   b50b4:	b003      	add	sp, #12
   b50b6:	bd30      	pop	{r4, r5, pc}

000b50b8 <_ZN11USARTSerialD0Ev>:
   b50b8:	b510      	push	{r4, lr}
   b50ba:	2114      	movs	r1, #20
   b50bc:	4604      	mov	r4, r0
   b50be:	f7fe ffee 	bl	b409e <_ZdlPvj>
   b50c2:	4620      	mov	r0, r4
   b50c4:	bd10      	pop	{r4, pc}
	...

000b50c8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b50c8:	b510      	push	{r4, lr}
   b50ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b50ce:	4604      	mov	r4, r0
   b50d0:	4608      	mov	r0, r1
   b50d2:	4611      	mov	r1, r2
   b50d4:	2200      	movs	r2, #0
   b50d6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b50da:	4b04      	ldr	r3, [pc, #16]	; (b50ec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b50dc:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b50de:	2301      	movs	r3, #1
  _serial = serial;
   b50e0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b50e2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b50e4:	f7ff fb82 	bl	b47ec <hal_usart_init_ex>
}
   b50e8:	4620      	mov	r0, r4
   b50ea:	bd10      	pop	{r4, pc}
   b50ec:	000b6868 	.word	0x000b6868

000b50f0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b50f0:	4770      	bx	lr

000b50f2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b50f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b50f4:	4606      	mov	r6, r0
   b50f6:	4615      	mov	r5, r2
   b50f8:	460c      	mov	r4, r1
   b50fa:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b50fc:	42bc      	cmp	r4, r7
   b50fe:	d006      	beq.n	b510e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5100:	6833      	ldr	r3, [r6, #0]
   b5102:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5106:	689b      	ldr	r3, [r3, #8]
   b5108:	4630      	mov	r0, r6
   b510a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b510c:	e7f6      	b.n	b50fc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b510e:	4628      	mov	r0, r5
   b5110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5112 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5112:	7c00      	ldrb	r0, [r0, #16]
   b5114:	2200      	movs	r2, #0
   b5116:	f7ff bb71 	b.w	b47fc <hal_i2c_write>

000b511a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b511a:	7c00      	ldrb	r0, [r0, #16]
   b511c:	2100      	movs	r1, #0
   b511e:	f7ff bb75 	b.w	b480c <hal_i2c_available>

000b5122 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5122:	7c00      	ldrb	r0, [r0, #16]
   b5124:	2100      	movs	r1, #0
   b5126:	f7ff bb79 	b.w	b481c <hal_i2c_read>

000b512a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b512a:	7c00      	ldrb	r0, [r0, #16]
   b512c:	2100      	movs	r1, #0
   b512e:	f7ff bb7d 	b.w	b482c <hal_i2c_peek>

000b5132 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5132:	7c00      	ldrb	r0, [r0, #16]
   b5134:	2100      	movs	r1, #0
   b5136:	f7ff bb81 	b.w	b483c <hal_i2c_flush>

000b513a <_ZN7TwoWireD0Ev>:
   b513a:	b510      	push	{r4, lr}
   b513c:	2114      	movs	r1, #20
   b513e:	4604      	mov	r4, r0
   b5140:	f7fe ffad 	bl	b409e <_ZdlPvj>
   b5144:	4620      	mov	r0, r4
   b5146:	bd10      	pop	{r4, pc}

000b5148 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5148:	b538      	push	{r3, r4, r5, lr}
   b514a:	4604      	mov	r4, r0
   b514c:	4615      	mov	r5, r2
   b514e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5152:	2200      	movs	r2, #0
   b5154:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5158:	4b09      	ldr	r3, [pc, #36]	; (b5180 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b515a:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b515c:	4608      	mov	r0, r1
   b515e:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b5160:	4629      	mov	r1, r5
   b5162:	f7ff fb7b 	bl	b485c <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5166:	30bf      	adds	r0, #191	; 0xbf
   b5168:	d108      	bne.n	b517c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b516a:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b516c:	07db      	lsls	r3, r3, #31
   b516e:	d505      	bpl.n	b517c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b5170:	6868      	ldr	r0, [r5, #4]
   b5172:	f7ff fca7 	bl	b4ac4 <free>
    free(conf.tx_buffer);
   b5176:	68e8      	ldr	r0, [r5, #12]
   b5178:	f7ff fca4 	bl	b4ac4 <free>
}
   b517c:	4620      	mov	r0, r4
   b517e:	bd38      	pop	{r3, r4, r5, pc}
   b5180:	000b6898 	.word	0x000b6898

000b5184 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b5184:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b5186:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b5188:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b518c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b518e:	2201      	movs	r2, #1
   b5190:	f04f 33ff 	mov.w	r3, #4294967295
   b5194:	f10d 0107 	add.w	r1, sp, #7
   b5198:	47a0      	blx	r4
}
   b519a:	b002      	add	sp, #8
   b519c:	bd10      	pop	{r4, pc}

000b519e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b519e:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b51a0:	6803      	ldr	r3, [r0, #0]
   b51a2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b51a4:	f04f 33ff 	mov.w	r3, #4294967295
   b51a8:	46a4      	mov	ip, r4
}
   b51aa:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b51ae:	4760      	bx	ip

000b51b0 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b51b0:	b513      	push	{r0, r1, r4, lr}
   b51b2:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b51b4:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b51b6:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b51ba:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b51bc:	f10d 0107 	add.w	r1, sp, #7
   b51c0:	2201      	movs	r2, #1
   b51c2:	47a0      	blx	r4
}
   b51c4:	b002      	add	sp, #8
   b51c6:	bd10      	pop	{r4, pc}

000b51c8 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b51c8:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b51ca:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b51cc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b51d0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b51d4:	429a      	cmp	r2, r3
int TCPClient::read() {
   b51d6:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b51d8:	d008      	beq.n	b51ec <_ZN9TCPClient4readEv+0x24>
   b51da:	6963      	ldr	r3, [r4, #20]
   b51dc:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b51e0:	1c51      	adds	r1, r2, #1
   b51e2:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b51e6:	4413      	add	r3, r2
   b51e8:	7918      	ldrb	r0, [r3, #4]
}
   b51ea:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b51ec:	6803      	ldr	r3, [r0, #0]
   b51ee:	691b      	ldr	r3, [r3, #16]
   b51f0:	4798      	blx	r3
   b51f2:	2800      	cmp	r0, #0
   b51f4:	d1f1      	bne.n	b51da <_ZN9TCPClient4readEv+0x12>
   b51f6:	f04f 30ff 	mov.w	r0, #4294967295
   b51fa:	e7f6      	b.n	b51ea <_ZN9TCPClient4readEv+0x22>

000b51fc <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b51fc:	4770      	bx	lr

000b51fe <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b51fe:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b5200:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b5202:	43c0      	mvns	r0, r0
   b5204:	0fc0      	lsrs	r0, r0, #31
   b5206:	4770      	bx	lr

000b5208 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5208:	4770      	bx	lr
	...

000b520c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b520c:	4b06      	ldr	r3, [pc, #24]	; (b5228 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b520e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5210:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b5212:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5216:	d005      	beq.n	b5224 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5218:	4608      	mov	r0, r1
   b521a:	f000 fc91 	bl	b5b40 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b521e:	2800      	cmp	r0, #0
   b5220:	bf08      	it	eq
   b5222:	2400      	moveq	r4, #0
      }
   b5224:	4620      	mov	r0, r4
   b5226:	bd10      	pop	{r4, pc}
   b5228:	000b67f4 	.word	0x000b67f4

000b522c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b522c:	b510      	push	{r4, lr}
   b522e:	21ac      	movs	r1, #172	; 0xac
   b5230:	4604      	mov	r4, r0
   b5232:	f7fe ff34 	bl	b409e <_ZdlPvj>
   b5236:	4620      	mov	r0, r4
   b5238:	bd10      	pop	{r4, pc}

000b523a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b523a:	21ac      	movs	r1, #172	; 0xac
   b523c:	f7fe bf2f 	b.w	b409e <_ZdlPvj>

000b5240 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b5240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b5244:	f04f 0800 	mov.w	r8, #0
   b5248:	b086      	sub	sp, #24
   b524a:	461c      	mov	r4, r3
   b524c:	f8c0 8004 	str.w	r8, [r0, #4]
   b5250:	4605      	mov	r5, r0
   b5252:	460e      	mov	r6, r1
   b5254:	4617      	mov	r7, r2
    struct timeval tv = {};
   b5256:	4641      	mov	r1, r8
   b5258:	2210      	movs	r2, #16
   b525a:	a802      	add	r0, sp, #8
   b525c:	f001 f984 	bl	b6568 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b5260:	1c63      	adds	r3, r4, #1
   b5262:	d009      	beq.n	b5278 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b5264:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5268:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b526c:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b5270:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b5274:	435c      	muls	r4, r3
   b5276:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b5278:	6968      	ldr	r0, [r5, #20]
   b527a:	2310      	movs	r3, #16
   b527c:	9300      	str	r3, [sp, #0]
   b527e:	6800      	ldr	r0, [r0, #0]
   b5280:	ab02      	add	r3, sp, #8
   b5282:	f241 0205 	movw	r2, #4101	; 0x1005
   b5286:	f640 71ff 	movw	r1, #4095	; 0xfff
   b528a:	f7ff faef 	bl	b486c <sock_setsockopt>
    if (ret < 0) {
   b528e:	2800      	cmp	r0, #0
   b5290:	da07      	bge.n	b52a2 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b5292:	f7ff fc1f 	bl	b4ad4 <__errno>
   b5296:	6803      	ldr	r3, [r0, #0]
   b5298:	606b      	str	r3, [r5, #4]
        return 0;
   b529a:	2000      	movs	r0, #0
}
   b529c:	b006      	add	sp, #24
   b529e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b52a2:	6968      	ldr	r0, [r5, #20]
   b52a4:	2300      	movs	r3, #0
   b52a6:	6800      	ldr	r0, [r0, #0]
   b52a8:	463a      	mov	r2, r7
   b52aa:	4631      	mov	r1, r6
   b52ac:	f7ff fafe 	bl	b48ac <sock_send>
    if (ret < 0) {
   b52b0:	1e03      	subs	r3, r0, #0
   b52b2:	dbee      	blt.n	b5292 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b52b4:	4618      	mov	r0, r3
   b52b6:	e7f1      	b.n	b529c <_ZN9TCPClient5writeEPKhjm+0x5c>

000b52b8 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b52b8:	b530      	push	{r4, r5, lr}
   b52ba:	b087      	sub	sp, #28
   b52bc:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b52be:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b52c0:	4668      	mov	r0, sp
   b52c2:	f7ff fe2b 	bl	b4f1c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b52c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b52c8:	3404      	adds	r4, #4
   b52ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b52cc:	682b      	ldr	r3, [r5, #0]
   b52ce:	7023      	strb	r3, [r4, #0]
    }
   b52d0:	b007      	add	sp, #28
   b52d2:	bd30      	pop	{r4, r5, pc}

000b52d4 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b52d4:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b52d6:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b52d8:	4b05      	ldr	r3, [pc, #20]	; (b52f0 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b52da:	4604      	mov	r4, r0
   b52dc:	358c      	adds	r5, #140	; 0x8c
   b52de:	f844 3b04 	str.w	r3, [r4], #4
   b52e2:	4606      	mov	r6, r0
   b52e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b52e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b52e8:	682b      	ldr	r3, [r5, #0]
   b52ea:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b52ec:	4630      	mov	r0, r6
   b52ee:	bd70      	pop	{r4, r5, r6, pc}
   b52f0:	000b6824 	.word	0x000b6824

000b52f4 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b52f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b52f8:	4698      	mov	r8, r3
    stop();
   b52fa:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b52fc:	b093      	sub	sp, #76	; 0x4c
   b52fe:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b5300:	2400      	movs	r4, #0
    stop();
   b5302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b5304:	4606      	mov	r6, r0
   b5306:	4617      	mov	r7, r2
    stop();
   b5308:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b530a:	4628      	mov	r0, r5
   b530c:	466b      	mov	r3, sp
   b530e:	4622      	mov	r2, r4
   b5310:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b5312:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b5314:	f7ff f9aa 	bl	b466c <netdb_getaddrinfo>
   b5318:	4605      	mov	r5, r0
   b531a:	2800      	cmp	r0, #0
   b531c:	d163      	bne.n	b53e6 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b531e:	9b00      	ldr	r3, [sp, #0]
   b5320:	2b00      	cmp	r3, #0
   b5322:	d04b      	beq.n	b53bc <_ZN9TCPClient7connectEPKctm+0xc8>
   b5324:	695b      	ldr	r3, [r3, #20]
   b5326:	2b00      	cmp	r3, #0
   b5328:	d048      	beq.n	b53bc <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b532a:	a806      	add	r0, sp, #24
   b532c:	f7ff fdb2 	bl	b4e94 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b5330:	9b00      	ldr	r3, [sp, #0]
   b5332:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b5334:	7863      	ldrb	r3, [r4, #1]
   b5336:	2b02      	cmp	r3, #2
   b5338:	d104      	bne.n	b5344 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b533a:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b533c:	a806      	add	r0, sp, #24
   b533e:	f7ff ffbb 	bl	b52b8 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b5342:	e026      	b.n	b5392 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b5344:	2b0a      	cmp	r3, #10
   b5346:	d124      	bne.n	b5392 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b5348:	2211      	movs	r2, #17
   b534a:	4629      	mov	r1, r5
   b534c:	a801      	add	r0, sp, #4
   b534e:	f001 f90b 	bl	b6568 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b5352:	68a3      	ldr	r3, [r4, #8]
   b5354:	2b00      	cmp	r3, #0
   b5356:	d038      	beq.n	b53ca <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5358:	f104 0308 	add.w	r3, r4, #8
   b535c:	f10d 0c04 	add.w	ip, sp, #4
   b5360:	3418      	adds	r4, #24
   b5362:	6818      	ldr	r0, [r3, #0]
   b5364:	6859      	ldr	r1, [r3, #4]
   b5366:	4662      	mov	r2, ip
   b5368:	c203      	stmia	r2!, {r0, r1}
   b536a:	3308      	adds	r3, #8
   b536c:	42a3      	cmp	r3, r4
   b536e:	4694      	mov	ip, r2
   b5370:	d1f7      	bne.n	b5362 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b5372:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b5374:	a901      	add	r1, sp, #4
   b5376:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b5378:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b537c:	f7ff fd98 	bl	b4eb0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5380:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b5384:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5388:	ac07      	add	r4, sp, #28
   b538a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b538c:	f8dc 3000 	ldr.w	r3, [ip]
   b5390:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b5392:	a806      	add	r0, sp, #24
   b5394:	f7ff fd9e 	bl	b4ed4 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b5398:	b180      	cbz	r0, b53bc <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b539a:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b539c:	ad07      	add	r5, sp, #28
   b539e:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b53a2:	4b12      	ldr	r3, [pc, #72]	; (b53ec <_ZN9TCPClient7connectEPKctm+0xf8>)
   b53a4:	930c      	str	r3, [sp, #48]	; 0x30
   b53a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b53a8:	ac0d      	add	r4, sp, #52	; 0x34
   b53aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b53ac:	682b      	ldr	r3, [r5, #0]
   b53ae:	7023      	strb	r3, [r4, #0]
   b53b0:	463a      	mov	r2, r7
   b53b2:	4643      	mov	r3, r8
   b53b4:	a90c      	add	r1, sp, #48	; 0x30
   b53b6:	4630      	mov	r0, r6
   b53b8:	47c8      	blx	r9
   b53ba:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b53bc:	9800      	ldr	r0, [sp, #0]
   b53be:	f7ff f94d 	bl	b465c <netdb_freeaddrinfo>
}
   b53c2:	4628      	mov	r0, r5
   b53c4:	b013      	add	sp, #76	; 0x4c
   b53c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b53ca:	68e3      	ldr	r3, [r4, #12]
   b53cc:	2b00      	cmp	r3, #0
   b53ce:	d1c3      	bne.n	b5358 <_ZN9TCPClient7connectEPKctm+0x64>
   b53d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b53d4:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b53d8:	f7ff f9c0 	bl	b475c <inet_htonl>
   b53dc:	4581      	cmp	r9, r0
   b53de:	d1bb      	bne.n	b5358 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b53e0:	f104 0114 	add.w	r1, r4, #20
   b53e4:	e7aa      	b.n	b533c <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b53e6:	4625      	mov	r5, r4
   b53e8:	e7e8      	b.n	b53bc <_ZN9TCPClient7connectEPKctm+0xc8>
   b53ea:	bf00      	nop
   b53ec:	000b6824 	.word	0x000b6824

000b53f0 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b53f0:	b538      	push	{r3, r4, r5, lr}
   b53f2:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b53f4:	681a      	ldr	r2, [r3, #0]
   b53f6:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b53f8:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b53fa:	da10      	bge.n	b541e <_ZN9TCPClient9connectedEv+0x2e>
   b53fc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5400:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5404:	429a      	cmp	r2, r3
   b5406:	d10a      	bne.n	b541e <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b5408:	6803      	ldr	r3, [r0, #0]
   b540a:	691b      	ldr	r3, [r3, #16]
   b540c:	4798      	blx	r3
        if (!rv) {
   b540e:	4604      	mov	r4, r0
   b5410:	b928      	cbnz	r0, b541e <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b5412:	682b      	ldr	r3, [r5, #0]
   b5414:	4628      	mov	r0, r5
   b5416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5418:	4798      	blx	r3
        rv = available();
   b541a:	4620      	mov	r0, r4
}
   b541c:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b541e:	2001      	movs	r0, #1
   b5420:	e7fc      	b.n	b541c <_ZN9TCPClient9connectedEv+0x2c>

000b5422 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b5422:	b510      	push	{r4, lr}
   b5424:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5426:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b542a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b542e:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b5430:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5432:	d005      	beq.n	b5440 <_ZN9TCPClient4peekEv+0x1e>
   b5434:	6963      	ldr	r3, [r4, #20]
   b5436:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b543a:	4413      	add	r3, r2
   b543c:	7918      	ldrb	r0, [r3, #4]
}
   b543e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b5440:	6803      	ldr	r3, [r0, #0]
   b5442:	691b      	ldr	r3, [r3, #16]
   b5444:	4798      	blx	r3
   b5446:	2800      	cmp	r0, #0
   b5448:	d1f4      	bne.n	b5434 <_ZN9TCPClient4peekEv+0x12>
   b544a:	f04f 30ff 	mov.w	r0, #4294967295
   b544e:	e7f6      	b.n	b543e <_ZN9TCPClient4peekEv+0x1c>

000b5450 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b5450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5452:	6943      	ldr	r3, [r0, #20]
   b5454:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b5456:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b545a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b545e:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b5460:	4605      	mov	r5, r0
   b5462:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b5464:	d016      	beq.n	b5494 <_ZN9TCPClient4readEPhj+0x44>
   b5466:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b5468:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b546c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b5470:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b5472:	42bc      	cmp	r4, r7
   b5474:	bf28      	it	cs
   b5476:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b5478:	3304      	adds	r3, #4
   b547a:	4622      	mov	r2, r4
   b547c:	4419      	add	r1, r3
   b547e:	4630      	mov	r0, r6
   b5480:	f001 f864 	bl	b654c <memcpy>
   b5484:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b5486:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b548a:	4423      	add	r3, r4
   b548c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b5490:	4620      	mov	r0, r4
   b5492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b5494:	6803      	ldr	r3, [r0, #0]
   b5496:	691b      	ldr	r3, [r3, #16]
   b5498:	4798      	blx	r3
   b549a:	2800      	cmp	r0, #0
   b549c:	d1e3      	bne.n	b5466 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b549e:	f04f 34ff 	mov.w	r4, #4294967295
   b54a2:	e7f5      	b.n	b5490 <_ZN9TCPClient4readEPhj+0x40>

000b54a4 <_ZN9TCPClient12flush_bufferEv>:
   b54a4:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b54a6:	2300      	movs	r3, #0
   b54a8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b54ac:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b54ae:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b54b2:	4770      	bx	lr

000b54b4 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b54b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b54b8:	461f      	mov	r7, r3
    stop();
   b54ba:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b54bc:	460c      	mov	r4, r1
    stop();
   b54be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b54c0:	b08a      	sub	sp, #40	; 0x28
   b54c2:	4605      	mov	r5, r0
   b54c4:	4616      	mov	r6, r2
    stop();
   b54c6:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b54c8:	7d23      	ldrb	r3, [r4, #20]
   b54ca:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b54ce:	2b04      	cmp	r3, #4
   b54d0:	bf0c      	ite	eq
   b54d2:	2002      	moveq	r0, #2
   b54d4:	200a      	movne	r0, #10
   b54d6:	2206      	movs	r2, #6
   b54d8:	2101      	movs	r1, #1
   b54da:	f7ff f9ef 	bl	b48bc <sock_socket>
   b54de:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b54e2:	696b      	ldr	r3, [r5, #20]
   b54e4:	681b      	ldr	r3, [r3, #0]
   b54e6:	2b00      	cmp	r3, #0
   b54e8:	da08      	bge.n	b54fc <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b54ea:	682b      	ldr	r3, [r5, #0]
   b54ec:	4628      	mov	r0, r5
   b54ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b54f0:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b54f2:	4798      	blx	r3
}
   b54f4:	4620      	mov	r0, r4
   b54f6:	b00a      	add	sp, #40	; 0x28
   b54f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b54fc:	4628      	mov	r0, r5
   b54fe:	f7ff ffd1 	bl	b54a4 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b5502:	b1b7      	cbz	r7, b5532 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b5504:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5506:	a903      	add	r1, sp, #12
   b5508:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b550a:	9303      	str	r3, [sp, #12]
   b550c:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b5510:	f7ff f8ec 	bl	b46ec <if_index_to_name>
   b5514:	2800      	cmp	r0, #0
   b5516:	d1e8      	bne.n	b54ea <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b5518:	6968      	ldr	r0, [r5, #20]
   b551a:	2306      	movs	r3, #6
   b551c:	9300      	str	r3, [sp, #0]
   b551e:	6800      	ldr	r0, [r0, #0]
   b5520:	ab03      	add	r3, sp, #12
   b5522:	f241 020b 	movw	r2, #4107	; 0x100b
   b5526:	f640 71ff 	movw	r1, #4095	; 0xfff
   b552a:	f7ff f99f 	bl	b486c <sock_setsockopt>
   b552e:	2800      	cmp	r0, #0
   b5530:	d1db      	bne.n	b54ea <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b5532:	221c      	movs	r2, #28
   b5534:	2100      	movs	r1, #0
   b5536:	a803      	add	r0, sp, #12
   b5538:	f001 f816 	bl	b6568 <memset>
    if (ip.version() == 4) {
   b553c:	7d23      	ldrb	r3, [r4, #20]
   b553e:	2b04      	cmp	r3, #4
   b5540:	d11d      	bne.n	b557e <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b5542:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b5546:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b5548:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b554c:	f7ff f90e 	bl	b476c <inet_htons>
   b5550:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b5554:	6860      	ldr	r0, [r4, #4]
   b5556:	f7ff f901 	bl	b475c <inet_htonl>
   b555a:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b555c:	696b      	ldr	r3, [r5, #20]
   b555e:	221c      	movs	r2, #28
   b5560:	6818      	ldr	r0, [r3, #0]
   b5562:	a903      	add	r1, sp, #12
   b5564:	f7ff f992 	bl	b488c <sock_connect>
   b5568:	2800      	cmp	r0, #0
   b556a:	d1be      	bne.n	b54ea <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b556c:	3404      	adds	r4, #4
   b556e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5570:	696d      	ldr	r5, [r5, #20]
   b5572:	358c      	adds	r5, #140	; 0x8c
   b5574:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5576:	6823      	ldr	r3, [r4, #0]
   b5578:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b557a:	2401      	movs	r4, #1
   b557c:	e7ba      	b.n	b54f4 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b557e:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b5582:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b5584:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b5588:	f7ff f8f0 	bl	b476c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b558c:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b558e:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b5592:	1d23      	adds	r3, r4, #4
   b5594:	f104 0714 	add.w	r7, r4, #20
   b5598:	6818      	ldr	r0, [r3, #0]
   b559a:	6859      	ldr	r1, [r3, #4]
   b559c:	4632      	mov	r2, r6
   b559e:	c203      	stmia	r2!, {r0, r1}
   b55a0:	3308      	adds	r3, #8
   b55a2:	42bb      	cmp	r3, r7
   b55a4:	4616      	mov	r6, r2
   b55a6:	d1f7      	bne.n	b5598 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b55a8:	e7d8      	b.n	b555c <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b55ac <_ZN9TCPClient9availableEv>:
{
   b55ac:	b530      	push	{r4, r5, lr}
   b55ae:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b55b0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b55b4:	b08b      	sub	sp, #44	; 0x2c
   b55b6:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b55b8:	b12b      	cbz	r3, b55c6 <_ZN9TCPClient9availableEv+0x1a>
   b55ba:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b55be:	429a      	cmp	r2, r3
   b55c0:	d101      	bne.n	b55c6 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b55c2:	f7ff ff6f 	bl	b54a4 <_ZN9TCPClient12flush_bufferEv>
   b55c6:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b55c8:	6808      	ldr	r0, [r1, #0]
   b55ca:	2800      	cmp	r0, #0
   b55cc:	db18      	blt.n	b5600 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b55ce:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b55d2:	2d7f      	cmp	r5, #127	; 0x7f
   b55d4:	d814      	bhi.n	b5600 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b55d6:	3104      	adds	r1, #4
   b55d8:	2308      	movs	r3, #8
   b55da:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b55de:	4429      	add	r1, r5
   b55e0:	f7ff f95c 	bl	b489c <sock_recv>
            if (ret > 0) {
   b55e4:	2800      	cmp	r0, #0
   b55e6:	dd13      	ble.n	b5610 <_ZN9TCPClient9availableEv+0x64>
   b55e8:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b55ea:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b55ee:	b90a      	cbnz	r2, b55f4 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b55f0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b55f4:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b55f6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b55fa:	4410      	add	r0, r2
   b55fc:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b5600:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b5602:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b5606:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b560a:	1ac0      	subs	r0, r0, r3
   b560c:	b00b      	add	sp, #44	; 0x2c
   b560e:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b5610:	f7ff fa60 	bl	b4ad4 <__errno>
   b5614:	6803      	ldr	r3, [r0, #0]
   b5616:	2b0b      	cmp	r3, #11
   b5618:	d0f2      	beq.n	b5600 <_ZN9TCPClient9availableEv+0x54>
   b561a:	f7ff fa5b 	bl	b4ad4 <__errno>
   b561e:	6803      	ldr	r3, [r0, #0]
   b5620:	2b0b      	cmp	r3, #11
   b5622:	d0ed      	beq.n	b5600 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b5624:	2320      	movs	r3, #32
   b5626:	2500      	movs	r5, #0
   b5628:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b562c:	f7ff fa52 	bl	b4ad4 <__errno>
   b5630:	6803      	ldr	r3, [r0, #0]
   b5632:	9301      	str	r3, [sp, #4]
   b5634:	4b08      	ldr	r3, [pc, #32]	; (b5658 <_ZN9TCPClient9availableEv+0xac>)
   b5636:	4909      	ldr	r1, [pc, #36]	; (b565c <_ZN9TCPClient9availableEv+0xb0>)
   b5638:	9300      	str	r3, [sp, #0]
   b563a:	aa02      	add	r2, sp, #8
   b563c:	462b      	mov	r3, r5
   b563e:	2032      	movs	r0, #50	; 0x32
   b5640:	f7ff f99c 	bl	b497c <log_message>
                    sock_close(d_->sock);
   b5644:	6963      	ldr	r3, [r4, #20]
   b5646:	6818      	ldr	r0, [r3, #0]
   b5648:	f7ff f918 	bl	b487c <sock_close>
   b564c:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b564e:	f04f 32ff 	mov.w	r2, #4294967295
   b5652:	601a      	str	r2, [r3, #0]
   b5654:	e7d4      	b.n	b5600 <_ZN9TCPClient9availableEv+0x54>
   b5656:	bf00      	nop
   b5658:	000b68bf 	.word	0x000b68bf
   b565c:	000b68b8 	.word	0x000b68b8

000b5660 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b5660:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b5662:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b5664:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b5666:	6818      	ldr	r0, [r3, #0]
   b5668:	2800      	cmp	r0, #0
   b566a:	db01      	blt.n	b5670 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b566c:	f7ff f906 	bl	b487c <sock_close>
   b5670:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b5672:	f04f 32ff 	mov.w	r2, #4294967295
   b5676:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b5678:	6960      	ldr	r0, [r4, #20]
   b567a:	2211      	movs	r2, #17
   b567c:	2100      	movs	r1, #0
   b567e:	308c      	adds	r0, #140	; 0x8c
   b5680:	f000 ff72 	bl	b6568 <memset>
    flush_buffer();
   b5684:	4620      	mov	r0, r4
}
   b5686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b568a:	f7ff bf0b 	b.w	b54a4 <_ZN9TCPClient12flush_bufferEv>

000b568e <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b568e:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b5690:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b5692:	4604      	mov	r4, r0
          total(0) {
   b5694:	6001      	str	r1, [r0, #0]
   b5696:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b569a:	3088      	adds	r0, #136	; 0x88
   b569c:	f7ff fbfa 	bl	b4e94 <_ZN9IPAddressC1Ev>
}
   b56a0:	4620      	mov	r0, r4
   b56a2:	bd10      	pop	{r4, pc}

000b56a4 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b56a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b56a6:	2300      	movs	r3, #0
   b56a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b56ac:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b56b0:	4a0e      	ldr	r2, [pc, #56]	; (b56ec <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b56b2:	6103      	str	r3, [r0, #16]
   b56b4:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b56b6:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b56b8:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b56ba:	20ac      	movs	r0, #172	; 0xac
   b56bc:	9101      	str	r1, [sp, #4]
   b56be:	f7fe fcea 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b56c2:	1e05      	subs	r5, r0, #0
   b56c4:	f105 060c 	add.w	r6, r5, #12
   b56c8:	d008      	beq.n	b56dc <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b56ca:	2301      	movs	r3, #1
   b56cc:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b56d0:	4b07      	ldr	r3, [pc, #28]	; (b56f0 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b56d2:	9901      	ldr	r1, [sp, #4]
   b56d4:	602b      	str	r3, [r5, #0]
   b56d6:	4630      	mov	r0, r6
   b56d8:	f7ff ffd9 	bl	b568e <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b56dc:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b56de:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b56e2:	f7ff fedf 	bl	b54a4 <_ZN9TCPClient12flush_bufferEv>
}
   b56e6:	b002      	add	sp, #8
   b56e8:	bd70      	pop	{r4, r5, r6, pc}
   b56ea:	bf00      	nop
   b56ec:	000b68f4 	.word	0x000b68f4
   b56f0:	000b68d8 	.word	0x000b68d8

000b56f4 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b56f4:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b56f6:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b56fa:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b56fc:	f7ff ffd2 	bl	b56a4 <_ZN9TCPClientC1Ei>
}
   b5700:	4620      	mov	r0, r4
   b5702:	bd10      	pop	{r4, pc}

000b5704 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b5704:	b510      	push	{r4, lr}
   b5706:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b5708:	6800      	ldr	r0, [r0, #0]
   b570a:	2800      	cmp	r0, #0
   b570c:	db01      	blt.n	b5712 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b570e:	f7ff f8b5 	bl	b487c <sock_close>
    }
}
   b5712:	4620      	mov	r0, r4
   b5714:	bd10      	pop	{r4, pc}

000b5716 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b5716:	300c      	adds	r0, #12
   b5718:	f7ff bff4 	b.w	b5704 <_ZN9TCPClient4DataD1Ev>

000b571c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b571c:	2200      	movs	r2, #0
   b571e:	6840      	ldr	r0, [r0, #4]
   b5720:	4611      	mov	r1, r2
   b5722:	f7ff b96f 	b.w	b4a04 <network_ready>

000b5726 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5726:	2200      	movs	r2, #0
   b5728:	6840      	ldr	r0, [r0, #4]
   b572a:	4611      	mov	r1, r2
   b572c:	f7ff b98a 	b.w	b4a44 <network_listening>

000b5730 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5730:	2200      	movs	r2, #0
   b5732:	6840      	ldr	r0, [r0, #4]
   b5734:	4611      	mov	r1, r2
   b5736:	f7ff b995 	b.w	b4a64 <network_get_listen_timeout>

000b573a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b573a:	6840      	ldr	r0, [r0, #4]
   b573c:	2200      	movs	r2, #0
   b573e:	f7ff b989 	b.w	b4a54 <network_set_listen_timeout>

000b5742 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5742:	6840      	ldr	r0, [r0, #4]
   b5744:	2200      	movs	r2, #0
   b5746:	f081 0101 	eor.w	r1, r1, #1
   b574a:	f7ff b973 	b.w	b4a34 <network_listen>

000b574e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b574e:	2300      	movs	r3, #0
   b5750:	6840      	ldr	r0, [r0, #4]
   b5752:	461a      	mov	r2, r3
   b5754:	4619      	mov	r1, r3
   b5756:	f7ff b965 	b.w	b4a24 <network_off>

000b575a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b575a:	2300      	movs	r3, #0
   b575c:	6840      	ldr	r0, [r0, #4]
   b575e:	461a      	mov	r2, r3
   b5760:	4619      	mov	r1, r3
   b5762:	f7ff b957 	b.w	b4a14 <network_on>

000b5766 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5766:	2200      	movs	r2, #0
   b5768:	6840      	ldr	r0, [r0, #4]
   b576a:	4611      	mov	r1, r2
   b576c:	f7ff b93a 	b.w	b49e4 <network_connecting>

000b5770 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5770:	6840      	ldr	r0, [r0, #4]
   b5772:	2200      	movs	r2, #0
   b5774:	2102      	movs	r1, #2
   b5776:	f7ff b93d 	b.w	b49f4 <network_disconnect>

000b577a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b577a:	2300      	movs	r3, #0
   b577c:	6840      	ldr	r0, [r0, #4]
   b577e:	461a      	mov	r2, r3
   b5780:	f7ff b928 	b.w	b49d4 <network_connect>

000b5784 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5784:	4b02      	ldr	r3, [pc, #8]	; (b5790 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5786:	2204      	movs	r2, #4
   b5788:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b578a:	4a02      	ldr	r2, [pc, #8]	; (b5794 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b578c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b578e:	4770      	bx	lr
   b5790:	2003e70c 	.word	0x2003e70c
   b5794:	000b6940 	.word	0x000b6940

000b5798 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5798:	2300      	movs	r3, #0
   b579a:	6840      	ldr	r0, [r0, #4]
   b579c:	461a      	mov	r2, r3
   b579e:	f7ff b919 	b.w	b49d4 <network_connect>

000b57a2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b57a2:	6840      	ldr	r0, [r0, #4]
   b57a4:	2200      	movs	r2, #0
   b57a6:	2102      	movs	r1, #2
   b57a8:	f7ff b924 	b.w	b49f4 <network_disconnect>

000b57ac <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b57ac:	2200      	movs	r2, #0
   b57ae:	6840      	ldr	r0, [r0, #4]
   b57b0:	4611      	mov	r1, r2
   b57b2:	f7ff b917 	b.w	b49e4 <network_connecting>

000b57b6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b57b6:	2200      	movs	r2, #0
   b57b8:	6840      	ldr	r0, [r0, #4]
   b57ba:	4611      	mov	r1, r2
   b57bc:	f7ff b922 	b.w	b4a04 <network_ready>

000b57c0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b57c0:	2300      	movs	r3, #0
   b57c2:	6840      	ldr	r0, [r0, #4]
   b57c4:	461a      	mov	r2, r3
   b57c6:	4619      	mov	r1, r3
   b57c8:	f7ff b924 	b.w	b4a14 <network_on>

000b57cc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b57cc:	2300      	movs	r3, #0
   b57ce:	6840      	ldr	r0, [r0, #4]
   b57d0:	461a      	mov	r2, r3
   b57d2:	4619      	mov	r1, r3
   b57d4:	f7ff b926 	b.w	b4a24 <network_off>

000b57d8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b57d8:	6840      	ldr	r0, [r0, #4]
   b57da:	2100      	movs	r1, #0
   b57dc:	f7ff b94a 	b.w	b4a74 <network_is_on>

000b57e0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b57e0:	6840      	ldr	r0, [r0, #4]
   b57e2:	2100      	movs	r1, #0
   b57e4:	f7ff b94e 	b.w	b4a84 <network_is_off>

000b57e8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b57e8:	6840      	ldr	r0, [r0, #4]
   b57ea:	2200      	movs	r2, #0
   b57ec:	f081 0101 	eor.w	r1, r1, #1
   b57f0:	f7ff b920 	b.w	b4a34 <network_listen>

000b57f4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b57f4:	6840      	ldr	r0, [r0, #4]
   b57f6:	2200      	movs	r2, #0
   b57f8:	f7ff b92c 	b.w	b4a54 <network_set_listen_timeout>

000b57fc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b57fc:	2200      	movs	r2, #0
   b57fe:	6840      	ldr	r0, [r0, #4]
   b5800:	4611      	mov	r1, r2
   b5802:	f7ff b92f 	b.w	b4a64 <network_get_listen_timeout>

000b5806 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5806:	2200      	movs	r2, #0
   b5808:	6840      	ldr	r0, [r0, #4]
   b580a:	4611      	mov	r1, r2
   b580c:	f7ff b91a 	b.w	b4a44 <network_listening>

000b5810 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5814:	b095      	sub	sp, #84	; 0x54
   b5816:	4614      	mov	r4, r2
   b5818:	460d      	mov	r5, r1
   b581a:	4607      	mov	r7, r0
    IPAddress addr;
   b581c:	f7ff fb3a 	bl	b4e94 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5820:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5822:	221c      	movs	r2, #28
   b5824:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5826:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5828:	f000 fe9e 	bl	b6568 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b582c:	2340      	movs	r3, #64	; 0x40
   b582e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5830:	4620      	mov	r0, r4
   b5832:	466b      	mov	r3, sp
   b5834:	aa0c      	add	r2, sp, #48	; 0x30
   b5836:	2100      	movs	r1, #0
   b5838:	f7fe ff18 	bl	b466c <netdb_getaddrinfo>
    if (!r) {
   b583c:	4604      	mov	r4, r0
   b583e:	2800      	cmp	r0, #0
   b5840:	d14b      	bne.n	b58da <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5842:	4602      	mov	r2, r0
   b5844:	2101      	movs	r1, #1
   b5846:	6868      	ldr	r0, [r5, #4]
   b5848:	f7ff f8dc 	bl	b4a04 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b584c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b584e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5850:	4622      	mov	r2, r4
   b5852:	6868      	ldr	r0, [r5, #4]
   b5854:	f7ff f8d6 	bl	b4a04 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5858:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b585a:	4681      	mov	r9, r0
        bool ok = false;
   b585c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b585e:	2e00      	cmp	r6, #0
   b5860:	d03b      	beq.n	b58da <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5862:	2900      	cmp	r1, #0
   b5864:	d139      	bne.n	b58da <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5866:	6873      	ldr	r3, [r6, #4]
   b5868:	2b02      	cmp	r3, #2
   b586a:	d003      	beq.n	b5874 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b586c:	2b0a      	cmp	r3, #10
   b586e:	d011      	beq.n	b5894 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5870:	69f6      	ldr	r6, [r6, #28]
   b5872:	e7f4      	b.n	b585e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5874:	f1b8 0f00 	cmp.w	r8, #0
   b5878:	d0fa      	beq.n	b5870 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b587a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b587c:	a806      	add	r0, sp, #24
   b587e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5880:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5882:	f7ff fb4b 	bl	b4f1c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5886:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5888:	1d3c      	adds	r4, r7, #4
   b588a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b588c:	682b      	ldr	r3, [r5, #0]
   b588e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5890:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5892:	e7ed      	b.n	b5870 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5894:	f1b9 0f00 	cmp.w	r9, #0
   b5898:	d0ea      	beq.n	b5870 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b589a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b589c:	2210      	movs	r2, #16
   b589e:	a801      	add	r0, sp, #4
   b58a0:	f000 fe62 	bl	b6568 <memset>
                    a.v = 6;
   b58a4:	2306      	movs	r3, #6
   b58a6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b58aa:	ad01      	add	r5, sp, #4
   b58ac:	f104 0308 	add.w	r3, r4, #8
   b58b0:	3418      	adds	r4, #24
   b58b2:	6818      	ldr	r0, [r3, #0]
   b58b4:	6859      	ldr	r1, [r3, #4]
   b58b6:	462a      	mov	r2, r5
   b58b8:	c203      	stmia	r2!, {r0, r1}
   b58ba:	3308      	adds	r3, #8
   b58bc:	42a3      	cmp	r3, r4
   b58be:	4615      	mov	r5, r2
   b58c0:	d1f7      	bne.n	b58b2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b58c2:	a901      	add	r1, sp, #4
   b58c4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b58c6:	ad07      	add	r5, sp, #28
   b58c8:	f7ff faf2 	bl	b4eb0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b58cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b58ce:	1d3c      	adds	r4, r7, #4
   b58d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b58d2:	682b      	ldr	r3, [r5, #0]
   b58d4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b58d6:	4649      	mov	r1, r9
   b58d8:	e7ca      	b.n	b5870 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b58da:	9800      	ldr	r0, [sp, #0]
   b58dc:	f7fe febe 	bl	b465c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b58e0:	4638      	mov	r0, r7
   b58e2:	b015      	add	sp, #84	; 0x54
   b58e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b58e8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b58e8:	4b02      	ldr	r3, [pc, #8]	; (b58f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b58ea:	4a03      	ldr	r2, [pc, #12]	; (b58f8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b58ec:	601a      	str	r2, [r3, #0]
   b58ee:	2200      	movs	r2, #0
   b58f0:	605a      	str	r2, [r3, #4]

} // spark
   b58f2:	4770      	bx	lr
   b58f4:	2003e714 	.word	0x2003e714
   b58f8:	000b697c 	.word	0x000b697c

000b58fc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b58fc:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b58fe:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5900:	d902      	bls.n	b5908 <pinAvailable+0xc>
    return false;
   b5902:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5904:	b002      	add	sp, #8
   b5906:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5908:	f1a0 030b 	sub.w	r3, r0, #11
   b590c:	2b02      	cmp	r3, #2
   b590e:	d81a      	bhi.n	b5946 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5910:	4c17      	ldr	r4, [pc, #92]	; (b5970 <pinAvailable+0x74>)
   b5912:	7821      	ldrb	r1, [r4, #0]
   b5914:	f3bf 8f5b 	dmb	ish
   b5918:	f011 0101 	ands.w	r1, r1, #1
   b591c:	d10b      	bne.n	b5936 <pinAvailable+0x3a>
   b591e:	4620      	mov	r0, r4
   b5920:	9101      	str	r1, [sp, #4]
   b5922:	f7fe fbcb 	bl	b40bc <__cxa_guard_acquire>
   b5926:	9901      	ldr	r1, [sp, #4]
   b5928:	b128      	cbz	r0, b5936 <pinAvailable+0x3a>
   b592a:	4812      	ldr	r0, [pc, #72]	; (b5974 <pinAvailable+0x78>)
   b592c:	f7ff f928 	bl	b4b80 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5930:	4620      	mov	r0, r4
   b5932:	f7fe fbc8 	bl	b40c6 <__cxa_guard_release>
   b5936:	4b0f      	ldr	r3, [pc, #60]	; (b5974 <pinAvailable+0x78>)
   b5938:	7818      	ldrb	r0, [r3, #0]
   b593a:	f7fe ffcf 	bl	b48dc <hal_spi_is_enabled>
   b593e:	2800      	cmp	r0, #0
   b5940:	d1df      	bne.n	b5902 <pinAvailable+0x6>
  return true; // 'pin' is available
   b5942:	2001      	movs	r0, #1
   b5944:	e7de      	b.n	b5904 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5946:	2801      	cmp	r0, #1
   b5948:	d809      	bhi.n	b595e <pinAvailable+0x62>
   b594a:	f000 f8d3 	bl	b5af4 <_Z19__fetch_global_Wirev>
   b594e:	2100      	movs	r1, #0
   b5950:	7c00      	ldrb	r0, [r0, #16]
   b5952:	f7fe ff7b 	bl	b484c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5956:	f080 0001 	eor.w	r0, r0, #1
   b595a:	b2c0      	uxtb	r0, r0
   b595c:	e7d2      	b.n	b5904 <pinAvailable+0x8>
   b595e:	3809      	subs	r0, #9
   b5960:	2801      	cmp	r0, #1
   b5962:	d8ee      	bhi.n	b5942 <pinAvailable+0x46>
   b5964:	f000 f886 	bl	b5a74 <_Z22__fetch_global_Serial1v>
   b5968:	7c00      	ldrb	r0, [r0, #16]
   b596a:	f7fe ff2f 	bl	b47cc <hal_usart_is_enabled>
   b596e:	e7f2      	b.n	b5956 <pinAvailable+0x5a>
   b5970:	2003e71c 	.word	0x2003e71c
   b5974:	2003e720 	.word	0x2003e720

000b5978 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5978:	2823      	cmp	r0, #35	; 0x23
{
   b597a:	b538      	push	{r3, r4, r5, lr}
   b597c:	4604      	mov	r4, r0
   b597e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5980:	d80a      	bhi.n	b5998 <pinMode+0x20>
   b5982:	29ff      	cmp	r1, #255	; 0xff
   b5984:	d008      	beq.n	b5998 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5986:	f7ff ffb9 	bl	b58fc <pinAvailable>
   b598a:	b128      	cbz	r0, b5998 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b598c:	4629      	mov	r1, r5
   b598e:	4620      	mov	r0, r4
}
   b5990:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b5994:	f7fe be7a 	b.w	b468c <HAL_Pin_Mode>
}
   b5998:	bd38      	pop	{r3, r4, r5, pc}

000b599a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b599a:	b538      	push	{r3, r4, r5, lr}
   b599c:	4604      	mov	r4, r0
   b599e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b59a0:	f7fe fe7c 	bl	b469c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b59a4:	28ff      	cmp	r0, #255	; 0xff
   b59a6:	d010      	beq.n	b59ca <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b59a8:	2806      	cmp	r0, #6
   b59aa:	d804      	bhi.n	b59b6 <digitalWrite+0x1c>
   b59ac:	234d      	movs	r3, #77	; 0x4d
   b59ae:	fa23 f000 	lsr.w	r0, r3, r0
   b59b2:	07c3      	lsls	r3, r0, #31
   b59b4:	d409      	bmi.n	b59ca <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b59b6:	4620      	mov	r0, r4
   b59b8:	f7ff ffa0 	bl	b58fc <pinAvailable>
   b59bc:	b128      	cbz	r0, b59ca <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b59be:	4629      	mov	r1, r5
   b59c0:	4620      	mov	r0, r4
}
   b59c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b59c6:	f7fe be71 	b.w	b46ac <HAL_GPIO_Write>
}
   b59ca:	bd38      	pop	{r3, r4, r5, pc}

000b59cc <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b59cc:	b510      	push	{r4, lr}
   b59ce:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b59d0:	f7fe fe64 	bl	b469c <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b59d4:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b59d6:	b2db      	uxtb	r3, r3
   b59d8:	2b01      	cmp	r3, #1
   b59da:	d908      	bls.n	b59ee <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b59dc:	4620      	mov	r0, r4
   b59de:	f7ff ff8d 	bl	b58fc <pinAvailable>
   b59e2:	b120      	cbz	r0, b59ee <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b59e4:	4620      	mov	r0, r4
}
   b59e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b59ea:	f7fe be67 	b.w	b46bc <HAL_GPIO_Read>
}
   b59ee:	2000      	movs	r0, #0
   b59f0:	bd10      	pop	{r4, pc}

000b59f2 <_Z11analogWritetm>:

/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 */
void analogWrite(pin_t pin, uint32_t value)
{
   b59f2:	b538      	push	{r3, r4, r5, lr}
   b59f4:	4604      	mov	r4, r0
   b59f6:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   b59f8:	f7ff ff80 	bl	b58fc <pinAvailable>
   b59fc:	b1f0      	cbz	r0, b5a3c <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   b59fe:	2104      	movs	r1, #4
   b5a00:	4620      	mov	r0, r4
   b5a02:	f7fe fe3b 	bl	b467c <HAL_Validate_Pin_Function>
   b5a06:	2804      	cmp	r0, #4
   b5a08:	d105      	bne.n	b5a16 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   b5a0a:	b2a9      	uxth	r1, r5
   b5a0c:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   b5a0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   b5a12:	f7fe be5b 	b.w	b46cc <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   b5a16:	2102      	movs	r1, #2
   b5a18:	4620      	mov	r0, r4
   b5a1a:	f7fe fe2f 	bl	b467c <HAL_Validate_Pin_Function>
   b5a1e:	2802      	cmp	r0, #2
   b5a20:	d10c      	bne.n	b5a3c <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   b5a22:	4620      	mov	r0, r4
   b5a24:	f7fe fe3a 	bl	b469c <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   b5a28:	2801      	cmp	r0, #1
   b5a2a:	d001      	beq.n	b5a30 <_Z11analogWritetm+0x3e>
   b5a2c:	2804      	cmp	r0, #4
   b5a2e:	d105      	bne.n	b5a3c <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   b5a30:	4629      	mov	r1, r5
   b5a32:	4620      	mov	r0, r4
}
   b5a34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   b5a38:	f7fe be50 	b.w	b46dc <hal_pwm_write_ext>
}
   b5a3c:	bd38      	pop	{r3, r4, r5, pc}

000b5a3e <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5a3e:	4770      	bx	lr

000b5a40 <_Z20acquireSerial1Bufferv>:
{
   b5a40:	b538      	push	{r3, r4, r5, lr}
   b5a42:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5a44:	2514      	movs	r5, #20
   b5a46:	462a      	mov	r2, r5
   b5a48:	2100      	movs	r1, #0
   b5a4a:	f000 fd8d 	bl	b6568 <memset>
   b5a4e:	8025      	strh	r5, [r4, #0]
   b5a50:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5a52:	4907      	ldr	r1, [pc, #28]	; (b5a70 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5a54:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5a56:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5a58:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5a5a:	f000 f86f 	bl	b5b3c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5a5e:	4904      	ldr	r1, [pc, #16]	; (b5a70 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5a60:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5a62:	4628      	mov	r0, r5
   b5a64:	f000 f86a 	bl	b5b3c <_ZnajRKSt9nothrow_t>
    };
   b5a68:	60e0      	str	r0, [r4, #12]
}
   b5a6a:	4620      	mov	r0, r4
   b5a6c:	bd38      	pop	{r3, r4, r5, pc}
   b5a6e:	bf00      	nop
   b5a70:	000b69b0 	.word	0x000b69b0

000b5a74 <_Z22__fetch_global_Serial1v>:
{
   b5a74:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5a76:	4d0e      	ldr	r5, [pc, #56]	; (b5ab0 <_Z22__fetch_global_Serial1v+0x3c>)
   b5a78:	7829      	ldrb	r1, [r5, #0]
   b5a7a:	f3bf 8f5b 	dmb	ish
   b5a7e:	f011 0401 	ands.w	r4, r1, #1
{
   b5a82:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5a84:	d111      	bne.n	b5aaa <_Z22__fetch_global_Serial1v+0x36>
   b5a86:	4628      	mov	r0, r5
   b5a88:	f7fe fb18 	bl	b40bc <__cxa_guard_acquire>
   b5a8c:	b168      	cbz	r0, b5aaa <_Z22__fetch_global_Serial1v+0x36>
   b5a8e:	a801      	add	r0, sp, #4
   b5a90:	f7ff ffd6 	bl	b5a40 <_Z20acquireSerial1Bufferv>
   b5a94:	aa01      	add	r2, sp, #4
   b5a96:	4621      	mov	r1, r4
   b5a98:	4806      	ldr	r0, [pc, #24]	; (b5ab4 <_Z22__fetch_global_Serial1v+0x40>)
   b5a9a:	f7ff fb15 	bl	b50c8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5a9e:	4628      	mov	r0, r5
   b5aa0:	f7fe fb11 	bl	b40c6 <__cxa_guard_release>
   b5aa4:	4804      	ldr	r0, [pc, #16]	; (b5ab8 <_Z22__fetch_global_Serial1v+0x44>)
   b5aa6:	f000 fd4b 	bl	b6540 <atexit>
    return serial1;
}
   b5aaa:	4802      	ldr	r0, [pc, #8]	; (b5ab4 <_Z22__fetch_global_Serial1v+0x40>)
   b5aac:	b007      	add	sp, #28
   b5aae:	bd30      	pop	{r4, r5, pc}
   b5ab0:	2003e728 	.word	0x2003e728
   b5ab4:	2003e72c 	.word	0x2003e72c
   b5ab8:	000b5a3f 	.word	0x000b5a3f

000b5abc <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5abc:	4770      	bx	lr
	...

000b5ac0 <_Z17acquireWireBufferv>:
{
   b5ac0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5ac2:	4b0a      	ldr	r3, [pc, #40]	; (b5aec <_Z17acquireWireBufferv+0x2c>)
   b5ac4:	6003      	str	r3, [r0, #0]
   b5ac6:	2301      	movs	r3, #1
{
   b5ac8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5aca:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5acc:	4908      	ldr	r1, [pc, #32]	; (b5af0 <_Z17acquireWireBufferv+0x30>)
   b5ace:	2020      	movs	r0, #32
   b5ad0:	f000 f834 	bl	b5b3c <_ZnajRKSt9nothrow_t>
	};
   b5ad4:	2520      	movs	r5, #32
   b5ad6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5ad8:	4905      	ldr	r1, [pc, #20]	; (b5af0 <_Z17acquireWireBufferv+0x30>)
	};
   b5ada:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5adc:	4628      	mov	r0, r5
   b5ade:	f000 f82d 	bl	b5b3c <_ZnajRKSt9nothrow_t>
	};
   b5ae2:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b5ae6:	4620      	mov	r0, r4
   b5ae8:	bd38      	pop	{r3, r4, r5, pc}
   b5aea:	bf00      	nop
   b5aec:	00010018 	.word	0x00010018
   b5af0:	000b69b0 	.word	0x000b69b0

000b5af4 <_Z19__fetch_global_Wirev>:
{
   b5af4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5af6:	4d0e      	ldr	r5, [pc, #56]	; (b5b30 <_Z19__fetch_global_Wirev+0x3c>)
   b5af8:	7829      	ldrb	r1, [r5, #0]
   b5afa:	f3bf 8f5b 	dmb	ish
   b5afe:	f011 0401 	ands.w	r4, r1, #1
{
   b5b02:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5b04:	d111      	bne.n	b5b2a <_Z19__fetch_global_Wirev+0x36>
   b5b06:	4628      	mov	r0, r5
   b5b08:	f7fe fad8 	bl	b40bc <__cxa_guard_acquire>
   b5b0c:	b168      	cbz	r0, b5b2a <_Z19__fetch_global_Wirev+0x36>
   b5b0e:	4668      	mov	r0, sp
   b5b10:	f7ff ffd6 	bl	b5ac0 <_Z17acquireWireBufferv>
   b5b14:	466a      	mov	r2, sp
   b5b16:	4621      	mov	r1, r4
   b5b18:	4806      	ldr	r0, [pc, #24]	; (b5b34 <_Z19__fetch_global_Wirev+0x40>)
   b5b1a:	f7ff fb15 	bl	b5148 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5b1e:	4628      	mov	r0, r5
   b5b20:	f7fe fad1 	bl	b40c6 <__cxa_guard_release>
   b5b24:	4804      	ldr	r0, [pc, #16]	; (b5b38 <_Z19__fetch_global_Wirev+0x44>)
   b5b26:	f000 fd0b 	bl	b6540 <atexit>
	return wire;
}
   b5b2a:	4802      	ldr	r0, [pc, #8]	; (b5b34 <_Z19__fetch_global_Wirev+0x40>)
   b5b2c:	b007      	add	sp, #28
   b5b2e:	bd30      	pop	{r4, r5, pc}
   b5b30:	2003e744 	.word	0x2003e744
   b5b34:	2003e748 	.word	0x2003e748
   b5b38:	000b5abd 	.word	0x000b5abd

000b5b3c <_ZnajRKSt9nothrow_t>:
   b5b3c:	f7fe baad 	b.w	b409a <_Znaj>

000b5b40 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b5b40:	4901      	ldr	r1, [pc, #4]	; (b5b48 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b5b42:	f000 b8f9 	b.w	b5d38 <_ZNKSt9type_infoeqERKS_>
   b5b46:	bf00      	nop
   b5b48:	000b69cc 	.word	0x000b69cc

000b5b4c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b5b4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b5b4e:	2400      	movs	r4, #0
   b5b50:	2310      	movs	r3, #16
   b5b52:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b5b56:	6803      	ldr	r3, [r0, #0]
   b5b58:	4615      	mov	r5, r2
   b5b5a:	699e      	ldr	r6, [r3, #24]
   b5b5c:	6812      	ldr	r2, [r2, #0]
   b5b5e:	466b      	mov	r3, sp
   b5b60:	e9cd 4400 	strd	r4, r4, [sp]
   b5b64:	47b0      	blx	r6
   b5b66:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b5b6a:	f003 0306 	and.w	r3, r3, #6
   b5b6e:	2b06      	cmp	r3, #6
   b5b70:	bf03      	ittte	eq
   b5b72:	9b00      	ldreq	r3, [sp, #0]
   b5b74:	602b      	streq	r3, [r5, #0]
   b5b76:	2001      	moveq	r0, #1
   b5b78:	4620      	movne	r0, r4
   b5b7a:	b004      	add	sp, #16
   b5b7c:	bd70      	pop	{r4, r5, r6, pc}

000b5b7e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b5b7e:	9800      	ldr	r0, [sp, #0]
   b5b80:	4290      	cmp	r0, r2
   b5b82:	bf14      	ite	ne
   b5b84:	2001      	movne	r0, #1
   b5b86:	2006      	moveq	r0, #6
   b5b88:	4770      	bx	lr
	...

000b5b8c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b5b8c:	b510      	push	{r4, lr}
   b5b8e:	4b03      	ldr	r3, [pc, #12]	; (b5b9c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b5b90:	6003      	str	r3, [r0, #0]
   b5b92:	4604      	mov	r4, r0
   b5b94:	f000 f8cd 	bl	b5d32 <_ZNSt9type_infoD1Ev>
   b5b98:	4620      	mov	r0, r4
   b5b9a:	bd10      	pop	{r4, pc}
   b5b9c:	000b6a0c 	.word	0x000b6a0c

000b5ba0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b5ba0:	b510      	push	{r4, lr}
   b5ba2:	4604      	mov	r4, r0
   b5ba4:	f7ff fff2 	bl	b5b8c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b5ba8:	4620      	mov	r0, r4
   b5baa:	2108      	movs	r1, #8
   b5bac:	f7fe fa77 	bl	b409e <_ZdlPvj>
   b5bb0:	4620      	mov	r0, r4
   b5bb2:	bd10      	pop	{r4, pc}

000b5bb4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b5bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5bb8:	461f      	mov	r7, r3
   b5bba:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b5bbe:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b5bc2:	4598      	cmp	r8, r3
   b5bc4:	4606      	mov	r6, r0
   b5bc6:	4615      	mov	r5, r2
   b5bc8:	d107      	bne.n	b5bda <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b5bca:	9907      	ldr	r1, [sp, #28]
   b5bcc:	f000 f8b4 	bl	b5d38 <_ZNKSt9type_infoeqERKS_>
   b5bd0:	b118      	cbz	r0, b5bda <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b5bd2:	7165      	strb	r5, [r4, #5]
   b5bd4:	2000      	movs	r0, #0
   b5bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5bda:	4639      	mov	r1, r7
   b5bdc:	4630      	mov	r0, r6
   b5bde:	f000 f8ab 	bl	b5d38 <_ZNKSt9type_infoeqERKS_>
   b5be2:	2800      	cmp	r0, #0
   b5be4:	d0f6      	beq.n	b5bd4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b5be6:	2301      	movs	r3, #1
   b5be8:	f8c4 8000 	str.w	r8, [r4]
   b5bec:	7125      	strb	r5, [r4, #4]
   b5bee:	71a3      	strb	r3, [r4, #6]
   b5bf0:	e7f0      	b.n	b5bd4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b5bf2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b5bf2:	b538      	push	{r3, r4, r5, lr}
   b5bf4:	4615      	mov	r5, r2
   b5bf6:	461c      	mov	r4, r3
   b5bf8:	f000 f89e 	bl	b5d38 <_ZNKSt9type_infoeqERKS_>
   b5bfc:	b120      	cbz	r0, b5c08 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b5bfe:	2308      	movs	r3, #8
   b5c00:	60e3      	str	r3, [r4, #12]
   b5c02:	2306      	movs	r3, #6
   b5c04:	6025      	str	r5, [r4, #0]
   b5c06:	7123      	strb	r3, [r4, #4]
   b5c08:	bd38      	pop	{r3, r4, r5, pc}

000b5c0a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b5c0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5c0c:	4605      	mov	r5, r0
   b5c0e:	460c      	mov	r4, r1
   b5c10:	9201      	str	r2, [sp, #4]
   b5c12:	461e      	mov	r6, r3
   b5c14:	f000 f890 	bl	b5d38 <_ZNKSt9type_infoeqERKS_>
   b5c18:	b950      	cbnz	r0, b5c30 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b5c1a:	2e03      	cmp	r6, #3
   b5c1c:	d808      	bhi.n	b5c30 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b5c1e:	6823      	ldr	r3, [r4, #0]
   b5c20:	9a01      	ldr	r2, [sp, #4]
   b5c22:	695b      	ldr	r3, [r3, #20]
   b5c24:	4629      	mov	r1, r5
   b5c26:	4620      	mov	r0, r4
   b5c28:	b002      	add	sp, #8
   b5c2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b5c2e:	4718      	bx	r3
   b5c30:	b002      	add	sp, #8
   b5c32:	bd70      	pop	{r4, r5, r6, pc}

000b5c34 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b5c34:	b510      	push	{r4, lr}
   b5c36:	4b03      	ldr	r3, [pc, #12]	; (b5c44 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b5c38:	6003      	str	r3, [r0, #0]
   b5c3a:	4604      	mov	r4, r0
   b5c3c:	f7ff ffa6 	bl	b5b8c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b5c40:	4620      	mov	r0, r4
   b5c42:	bd10      	pop	{r4, pc}
   b5c44:	000b6a6c 	.word	0x000b6a6c

000b5c48 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b5c48:	b510      	push	{r4, lr}
   b5c4a:	4604      	mov	r4, r0
   b5c4c:	f7ff fff2 	bl	b5c34 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b5c50:	4620      	mov	r0, r4
   b5c52:	210c      	movs	r1, #12
   b5c54:	f7fe fa23 	bl	b409e <_ZdlPvj>
   b5c58:	4620      	mov	r0, r4
   b5c5a:	bd10      	pop	{r4, pc}

000b5c5c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b5c5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5c5e:	9f08      	ldr	r7, [sp, #32]
   b5c60:	4297      	cmp	r7, r2
   b5c62:	4605      	mov	r5, r0
   b5c64:	460e      	mov	r6, r1
   b5c66:	4614      	mov	r4, r2
   b5c68:	d00a      	beq.n	b5c80 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b5c6a:	68a8      	ldr	r0, [r5, #8]
   b5c6c:	6802      	ldr	r2, [r0, #0]
   b5c6e:	9708      	str	r7, [sp, #32]
   b5c70:	6a15      	ldr	r5, [r2, #32]
   b5c72:	4631      	mov	r1, r6
   b5c74:	4622      	mov	r2, r4
   b5c76:	46ac      	mov	ip, r5
   b5c78:	b003      	add	sp, #12
   b5c7a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b5c7e:	4760      	bx	ip
   b5c80:	4619      	mov	r1, r3
   b5c82:	9301      	str	r3, [sp, #4]
   b5c84:	f000 f858 	bl	b5d38 <_ZNKSt9type_infoeqERKS_>
   b5c88:	9b01      	ldr	r3, [sp, #4]
   b5c8a:	2800      	cmp	r0, #0
   b5c8c:	d0ed      	beq.n	b5c6a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b5c8e:	2006      	movs	r0, #6
   b5c90:	b003      	add	sp, #12
   b5c92:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5c94 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b5c94:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5c98:	460d      	mov	r5, r1
   b5c9a:	4619      	mov	r1, r3
   b5c9c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b5ca0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b5ca4:	4681      	mov	r9, r0
   b5ca6:	4617      	mov	r7, r2
   b5ca8:	4698      	mov	r8, r3
   b5caa:	f000 f845 	bl	b5d38 <_ZNKSt9type_infoeqERKS_>
   b5cae:	b190      	cbz	r0, b5cd6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b5cb0:	2d00      	cmp	r5, #0
   b5cb2:	6034      	str	r4, [r6, #0]
   b5cb4:	7137      	strb	r7, [r6, #4]
   b5cb6:	db09      	blt.n	b5ccc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b5cb8:	1961      	adds	r1, r4, r5
   b5cba:	458a      	cmp	sl, r1
   b5cbc:	bf0c      	ite	eq
   b5cbe:	2106      	moveq	r1, #6
   b5cc0:	2101      	movne	r1, #1
   b5cc2:	71b1      	strb	r1, [r6, #6]
   b5cc4:	2000      	movs	r0, #0
   b5cc6:	b001      	add	sp, #4
   b5cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5ccc:	3502      	adds	r5, #2
   b5cce:	d1f9      	bne.n	b5cc4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b5cd0:	2301      	movs	r3, #1
   b5cd2:	71b3      	strb	r3, [r6, #6]
   b5cd4:	e7f6      	b.n	b5cc4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b5cd6:	4554      	cmp	r4, sl
   b5cd8:	d106      	bne.n	b5ce8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b5cda:	4659      	mov	r1, fp
   b5cdc:	4648      	mov	r0, r9
   b5cde:	f000 f82b 	bl	b5d38 <_ZNKSt9type_infoeqERKS_>
   b5ce2:	b108      	cbz	r0, b5ce8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b5ce4:	7177      	strb	r7, [r6, #5]
   b5ce6:	e7ed      	b.n	b5cc4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b5ce8:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b5cec:	6803      	ldr	r3, [r0, #0]
   b5cee:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b5cf2:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b5cf6:	69dc      	ldr	r4, [r3, #28]
   b5cf8:	463a      	mov	r2, r7
   b5cfa:	4643      	mov	r3, r8
   b5cfc:	4629      	mov	r1, r5
   b5cfe:	46a4      	mov	ip, r4
   b5d00:	b001      	add	sp, #4
   b5d02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5d06:	4760      	bx	ip

000b5d08 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b5d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5d0c:	4607      	mov	r7, r0
   b5d0e:	460c      	mov	r4, r1
   b5d10:	4615      	mov	r5, r2
   b5d12:	461e      	mov	r6, r3
   b5d14:	f7ff ff6d 	bl	b5bf2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b5d18:	b948      	cbnz	r0, b5d2e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b5d1a:	68b8      	ldr	r0, [r7, #8]
   b5d1c:	6803      	ldr	r3, [r0, #0]
   b5d1e:	699f      	ldr	r7, [r3, #24]
   b5d20:	462a      	mov	r2, r5
   b5d22:	4633      	mov	r3, r6
   b5d24:	4621      	mov	r1, r4
   b5d26:	46bc      	mov	ip, r7
   b5d28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b5d2c:	4760      	bx	ip
   b5d2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5d32 <_ZNSt9type_infoD1Ev>:
   b5d32:	4770      	bx	lr

000b5d34 <_ZNKSt9type_info14__is_pointer_pEv>:
   b5d34:	2000      	movs	r0, #0
   b5d36:	4770      	bx	lr

000b5d38 <_ZNKSt9type_infoeqERKS_>:
   b5d38:	4281      	cmp	r1, r0
   b5d3a:	b508      	push	{r3, lr}
   b5d3c:	d00e      	beq.n	b5d5c <_ZNKSt9type_infoeqERKS_+0x24>
   b5d3e:	6840      	ldr	r0, [r0, #4]
   b5d40:	7803      	ldrb	r3, [r0, #0]
   b5d42:	2b2a      	cmp	r3, #42	; 0x2a
   b5d44:	d00c      	beq.n	b5d60 <_ZNKSt9type_infoeqERKS_+0x28>
   b5d46:	6849      	ldr	r1, [r1, #4]
   b5d48:	780b      	ldrb	r3, [r1, #0]
   b5d4a:	2b2a      	cmp	r3, #42	; 0x2a
   b5d4c:	bf08      	it	eq
   b5d4e:	3101      	addeq	r1, #1
   b5d50:	f000 fc40 	bl	b65d4 <strcmp>
   b5d54:	fab0 f080 	clz	r0, r0
   b5d58:	0940      	lsrs	r0, r0, #5
   b5d5a:	bd08      	pop	{r3, pc}
   b5d5c:	2001      	movs	r0, #1
   b5d5e:	e7fc      	b.n	b5d5a <_ZNKSt9type_infoeqERKS_+0x22>
   b5d60:	2000      	movs	r0, #0
   b5d62:	e7fa      	b.n	b5d5a <_ZNKSt9type_infoeqERKS_+0x22>

000b5d64 <__aeabi_drsub>:
   b5d64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b5d68:	e002      	b.n	b5d70 <__adddf3>
   b5d6a:	bf00      	nop

000b5d6c <__aeabi_dsub>:
   b5d6c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b5d70 <__adddf3>:
   b5d70:	b530      	push	{r4, r5, lr}
   b5d72:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b5d76:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b5d7a:	ea94 0f05 	teq	r4, r5
   b5d7e:	bf08      	it	eq
   b5d80:	ea90 0f02 	teqeq	r0, r2
   b5d84:	bf1f      	itttt	ne
   b5d86:	ea54 0c00 	orrsne.w	ip, r4, r0
   b5d8a:	ea55 0c02 	orrsne.w	ip, r5, r2
   b5d8e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b5d92:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b5d96:	f000 80e2 	beq.w	b5f5e <__adddf3+0x1ee>
   b5d9a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b5d9e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b5da2:	bfb8      	it	lt
   b5da4:	426d      	neglt	r5, r5
   b5da6:	dd0c      	ble.n	b5dc2 <__adddf3+0x52>
   b5da8:	442c      	add	r4, r5
   b5daa:	ea80 0202 	eor.w	r2, r0, r2
   b5dae:	ea81 0303 	eor.w	r3, r1, r3
   b5db2:	ea82 0000 	eor.w	r0, r2, r0
   b5db6:	ea83 0101 	eor.w	r1, r3, r1
   b5dba:	ea80 0202 	eor.w	r2, r0, r2
   b5dbe:	ea81 0303 	eor.w	r3, r1, r3
   b5dc2:	2d36      	cmp	r5, #54	; 0x36
   b5dc4:	bf88      	it	hi
   b5dc6:	bd30      	pophi	{r4, r5, pc}
   b5dc8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b5dcc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b5dd0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b5dd4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b5dd8:	d002      	beq.n	b5de0 <__adddf3+0x70>
   b5dda:	4240      	negs	r0, r0
   b5ddc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b5de0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b5de4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b5de8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b5dec:	d002      	beq.n	b5df4 <__adddf3+0x84>
   b5dee:	4252      	negs	r2, r2
   b5df0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b5df4:	ea94 0f05 	teq	r4, r5
   b5df8:	f000 80a7 	beq.w	b5f4a <__adddf3+0x1da>
   b5dfc:	f1a4 0401 	sub.w	r4, r4, #1
   b5e00:	f1d5 0e20 	rsbs	lr, r5, #32
   b5e04:	db0d      	blt.n	b5e22 <__adddf3+0xb2>
   b5e06:	fa02 fc0e 	lsl.w	ip, r2, lr
   b5e0a:	fa22 f205 	lsr.w	r2, r2, r5
   b5e0e:	1880      	adds	r0, r0, r2
   b5e10:	f141 0100 	adc.w	r1, r1, #0
   b5e14:	fa03 f20e 	lsl.w	r2, r3, lr
   b5e18:	1880      	adds	r0, r0, r2
   b5e1a:	fa43 f305 	asr.w	r3, r3, r5
   b5e1e:	4159      	adcs	r1, r3
   b5e20:	e00e      	b.n	b5e40 <__adddf3+0xd0>
   b5e22:	f1a5 0520 	sub.w	r5, r5, #32
   b5e26:	f10e 0e20 	add.w	lr, lr, #32
   b5e2a:	2a01      	cmp	r2, #1
   b5e2c:	fa03 fc0e 	lsl.w	ip, r3, lr
   b5e30:	bf28      	it	cs
   b5e32:	f04c 0c02 	orrcs.w	ip, ip, #2
   b5e36:	fa43 f305 	asr.w	r3, r3, r5
   b5e3a:	18c0      	adds	r0, r0, r3
   b5e3c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b5e40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b5e44:	d507      	bpl.n	b5e56 <__adddf3+0xe6>
   b5e46:	f04f 0e00 	mov.w	lr, #0
   b5e4a:	f1dc 0c00 	rsbs	ip, ip, #0
   b5e4e:	eb7e 0000 	sbcs.w	r0, lr, r0
   b5e52:	eb6e 0101 	sbc.w	r1, lr, r1
   b5e56:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b5e5a:	d31b      	bcc.n	b5e94 <__adddf3+0x124>
   b5e5c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b5e60:	d30c      	bcc.n	b5e7c <__adddf3+0x10c>
   b5e62:	0849      	lsrs	r1, r1, #1
   b5e64:	ea5f 0030 	movs.w	r0, r0, rrx
   b5e68:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b5e6c:	f104 0401 	add.w	r4, r4, #1
   b5e70:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b5e74:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b5e78:	f080 809a 	bcs.w	b5fb0 <__adddf3+0x240>
   b5e7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b5e80:	bf08      	it	eq
   b5e82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b5e86:	f150 0000 	adcs.w	r0, r0, #0
   b5e8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b5e8e:	ea41 0105 	orr.w	r1, r1, r5
   b5e92:	bd30      	pop	{r4, r5, pc}
   b5e94:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b5e98:	4140      	adcs	r0, r0
   b5e9a:	eb41 0101 	adc.w	r1, r1, r1
   b5e9e:	3c01      	subs	r4, #1
   b5ea0:	bf28      	it	cs
   b5ea2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b5ea6:	d2e9      	bcs.n	b5e7c <__adddf3+0x10c>
   b5ea8:	f091 0f00 	teq	r1, #0
   b5eac:	bf04      	itt	eq
   b5eae:	4601      	moveq	r1, r0
   b5eb0:	2000      	moveq	r0, #0
   b5eb2:	fab1 f381 	clz	r3, r1
   b5eb6:	bf08      	it	eq
   b5eb8:	3320      	addeq	r3, #32
   b5eba:	f1a3 030b 	sub.w	r3, r3, #11
   b5ebe:	f1b3 0220 	subs.w	r2, r3, #32
   b5ec2:	da0c      	bge.n	b5ede <__adddf3+0x16e>
   b5ec4:	320c      	adds	r2, #12
   b5ec6:	dd08      	ble.n	b5eda <__adddf3+0x16a>
   b5ec8:	f102 0c14 	add.w	ip, r2, #20
   b5ecc:	f1c2 020c 	rsb	r2, r2, #12
   b5ed0:	fa01 f00c 	lsl.w	r0, r1, ip
   b5ed4:	fa21 f102 	lsr.w	r1, r1, r2
   b5ed8:	e00c      	b.n	b5ef4 <__adddf3+0x184>
   b5eda:	f102 0214 	add.w	r2, r2, #20
   b5ede:	bfd8      	it	le
   b5ee0:	f1c2 0c20 	rsble	ip, r2, #32
   b5ee4:	fa01 f102 	lsl.w	r1, r1, r2
   b5ee8:	fa20 fc0c 	lsr.w	ip, r0, ip
   b5eec:	bfdc      	itt	le
   b5eee:	ea41 010c 	orrle.w	r1, r1, ip
   b5ef2:	4090      	lslle	r0, r2
   b5ef4:	1ae4      	subs	r4, r4, r3
   b5ef6:	bfa2      	ittt	ge
   b5ef8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b5efc:	4329      	orrge	r1, r5
   b5efe:	bd30      	popge	{r4, r5, pc}
   b5f00:	ea6f 0404 	mvn.w	r4, r4
   b5f04:	3c1f      	subs	r4, #31
   b5f06:	da1c      	bge.n	b5f42 <__adddf3+0x1d2>
   b5f08:	340c      	adds	r4, #12
   b5f0a:	dc0e      	bgt.n	b5f2a <__adddf3+0x1ba>
   b5f0c:	f104 0414 	add.w	r4, r4, #20
   b5f10:	f1c4 0220 	rsb	r2, r4, #32
   b5f14:	fa20 f004 	lsr.w	r0, r0, r4
   b5f18:	fa01 f302 	lsl.w	r3, r1, r2
   b5f1c:	ea40 0003 	orr.w	r0, r0, r3
   b5f20:	fa21 f304 	lsr.w	r3, r1, r4
   b5f24:	ea45 0103 	orr.w	r1, r5, r3
   b5f28:	bd30      	pop	{r4, r5, pc}
   b5f2a:	f1c4 040c 	rsb	r4, r4, #12
   b5f2e:	f1c4 0220 	rsb	r2, r4, #32
   b5f32:	fa20 f002 	lsr.w	r0, r0, r2
   b5f36:	fa01 f304 	lsl.w	r3, r1, r4
   b5f3a:	ea40 0003 	orr.w	r0, r0, r3
   b5f3e:	4629      	mov	r1, r5
   b5f40:	bd30      	pop	{r4, r5, pc}
   b5f42:	fa21 f004 	lsr.w	r0, r1, r4
   b5f46:	4629      	mov	r1, r5
   b5f48:	bd30      	pop	{r4, r5, pc}
   b5f4a:	f094 0f00 	teq	r4, #0
   b5f4e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b5f52:	bf06      	itte	eq
   b5f54:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b5f58:	3401      	addeq	r4, #1
   b5f5a:	3d01      	subne	r5, #1
   b5f5c:	e74e      	b.n	b5dfc <__adddf3+0x8c>
   b5f5e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b5f62:	bf18      	it	ne
   b5f64:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b5f68:	d029      	beq.n	b5fbe <__adddf3+0x24e>
   b5f6a:	ea94 0f05 	teq	r4, r5
   b5f6e:	bf08      	it	eq
   b5f70:	ea90 0f02 	teqeq	r0, r2
   b5f74:	d005      	beq.n	b5f82 <__adddf3+0x212>
   b5f76:	ea54 0c00 	orrs.w	ip, r4, r0
   b5f7a:	bf04      	itt	eq
   b5f7c:	4619      	moveq	r1, r3
   b5f7e:	4610      	moveq	r0, r2
   b5f80:	bd30      	pop	{r4, r5, pc}
   b5f82:	ea91 0f03 	teq	r1, r3
   b5f86:	bf1e      	ittt	ne
   b5f88:	2100      	movne	r1, #0
   b5f8a:	2000      	movne	r0, #0
   b5f8c:	bd30      	popne	{r4, r5, pc}
   b5f8e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b5f92:	d105      	bne.n	b5fa0 <__adddf3+0x230>
   b5f94:	0040      	lsls	r0, r0, #1
   b5f96:	4149      	adcs	r1, r1
   b5f98:	bf28      	it	cs
   b5f9a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b5f9e:	bd30      	pop	{r4, r5, pc}
   b5fa0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b5fa4:	bf3c      	itt	cc
   b5fa6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b5faa:	bd30      	popcc	{r4, r5, pc}
   b5fac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b5fb0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b5fb4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b5fb8:	f04f 0000 	mov.w	r0, #0
   b5fbc:	bd30      	pop	{r4, r5, pc}
   b5fbe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b5fc2:	bf1a      	itte	ne
   b5fc4:	4619      	movne	r1, r3
   b5fc6:	4610      	movne	r0, r2
   b5fc8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b5fcc:	bf1c      	itt	ne
   b5fce:	460b      	movne	r3, r1
   b5fd0:	4602      	movne	r2, r0
   b5fd2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b5fd6:	bf06      	itte	eq
   b5fd8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b5fdc:	ea91 0f03 	teqeq	r1, r3
   b5fe0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b5fe4:	bd30      	pop	{r4, r5, pc}
   b5fe6:	bf00      	nop

000b5fe8 <__aeabi_ui2d>:
   b5fe8:	f090 0f00 	teq	r0, #0
   b5fec:	bf04      	itt	eq
   b5fee:	2100      	moveq	r1, #0
   b5ff0:	4770      	bxeq	lr
   b5ff2:	b530      	push	{r4, r5, lr}
   b5ff4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b5ff8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b5ffc:	f04f 0500 	mov.w	r5, #0
   b6000:	f04f 0100 	mov.w	r1, #0
   b6004:	e750      	b.n	b5ea8 <__adddf3+0x138>
   b6006:	bf00      	nop

000b6008 <__aeabi_i2d>:
   b6008:	f090 0f00 	teq	r0, #0
   b600c:	bf04      	itt	eq
   b600e:	2100      	moveq	r1, #0
   b6010:	4770      	bxeq	lr
   b6012:	b530      	push	{r4, r5, lr}
   b6014:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6018:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b601c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b6020:	bf48      	it	mi
   b6022:	4240      	negmi	r0, r0
   b6024:	f04f 0100 	mov.w	r1, #0
   b6028:	e73e      	b.n	b5ea8 <__adddf3+0x138>
   b602a:	bf00      	nop

000b602c <__aeabi_f2d>:
   b602c:	0042      	lsls	r2, r0, #1
   b602e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b6032:	ea4f 0131 	mov.w	r1, r1, rrx
   b6036:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b603a:	bf1f      	itttt	ne
   b603c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b6040:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b6044:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b6048:	4770      	bxne	lr
   b604a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b604e:	bf08      	it	eq
   b6050:	4770      	bxeq	lr
   b6052:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b6056:	bf04      	itt	eq
   b6058:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b605c:	4770      	bxeq	lr
   b605e:	b530      	push	{r4, r5, lr}
   b6060:	f44f 7460 	mov.w	r4, #896	; 0x380
   b6064:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6068:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b606c:	e71c      	b.n	b5ea8 <__adddf3+0x138>
   b606e:	bf00      	nop

000b6070 <__aeabi_ul2d>:
   b6070:	ea50 0201 	orrs.w	r2, r0, r1
   b6074:	bf08      	it	eq
   b6076:	4770      	bxeq	lr
   b6078:	b530      	push	{r4, r5, lr}
   b607a:	f04f 0500 	mov.w	r5, #0
   b607e:	e00a      	b.n	b6096 <__aeabi_l2d+0x16>

000b6080 <__aeabi_l2d>:
   b6080:	ea50 0201 	orrs.w	r2, r0, r1
   b6084:	bf08      	it	eq
   b6086:	4770      	bxeq	lr
   b6088:	b530      	push	{r4, r5, lr}
   b608a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b608e:	d502      	bpl.n	b6096 <__aeabi_l2d+0x16>
   b6090:	4240      	negs	r0, r0
   b6092:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6096:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b609a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b609e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b60a2:	f43f aed8 	beq.w	b5e56 <__adddf3+0xe6>
   b60a6:	f04f 0203 	mov.w	r2, #3
   b60aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b60ae:	bf18      	it	ne
   b60b0:	3203      	addne	r2, #3
   b60b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b60b6:	bf18      	it	ne
   b60b8:	3203      	addne	r2, #3
   b60ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b60be:	f1c2 0320 	rsb	r3, r2, #32
   b60c2:	fa00 fc03 	lsl.w	ip, r0, r3
   b60c6:	fa20 f002 	lsr.w	r0, r0, r2
   b60ca:	fa01 fe03 	lsl.w	lr, r1, r3
   b60ce:	ea40 000e 	orr.w	r0, r0, lr
   b60d2:	fa21 f102 	lsr.w	r1, r1, r2
   b60d6:	4414      	add	r4, r2
   b60d8:	e6bd      	b.n	b5e56 <__adddf3+0xe6>
   b60da:	bf00      	nop

000b60dc <__aeabi_dmul>:
   b60dc:	b570      	push	{r4, r5, r6, lr}
   b60de:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b60e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b60e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b60ea:	bf1d      	ittte	ne
   b60ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b60f0:	ea94 0f0c 	teqne	r4, ip
   b60f4:	ea95 0f0c 	teqne	r5, ip
   b60f8:	f000 f8de 	bleq	b62b8 <__aeabi_dmul+0x1dc>
   b60fc:	442c      	add	r4, r5
   b60fe:	ea81 0603 	eor.w	r6, r1, r3
   b6102:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b6106:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b610a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b610e:	bf18      	it	ne
   b6110:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b6114:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6118:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b611c:	d038      	beq.n	b6190 <__aeabi_dmul+0xb4>
   b611e:	fba0 ce02 	umull	ip, lr, r0, r2
   b6122:	f04f 0500 	mov.w	r5, #0
   b6126:	fbe1 e502 	umlal	lr, r5, r1, r2
   b612a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b612e:	fbe0 e503 	umlal	lr, r5, r0, r3
   b6132:	f04f 0600 	mov.w	r6, #0
   b6136:	fbe1 5603 	umlal	r5, r6, r1, r3
   b613a:	f09c 0f00 	teq	ip, #0
   b613e:	bf18      	it	ne
   b6140:	f04e 0e01 	orrne.w	lr, lr, #1
   b6144:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b6148:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b614c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b6150:	d204      	bcs.n	b615c <__aeabi_dmul+0x80>
   b6152:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b6156:	416d      	adcs	r5, r5
   b6158:	eb46 0606 	adc.w	r6, r6, r6
   b615c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b6160:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b6164:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b6168:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b616c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b6170:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6174:	bf88      	it	hi
   b6176:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b617a:	d81e      	bhi.n	b61ba <__aeabi_dmul+0xde>
   b617c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b6180:	bf08      	it	eq
   b6182:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b6186:	f150 0000 	adcs.w	r0, r0, #0
   b618a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b618e:	bd70      	pop	{r4, r5, r6, pc}
   b6190:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b6194:	ea46 0101 	orr.w	r1, r6, r1
   b6198:	ea40 0002 	orr.w	r0, r0, r2
   b619c:	ea81 0103 	eor.w	r1, r1, r3
   b61a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b61a4:	bfc2      	ittt	gt
   b61a6:	ebd4 050c 	rsbsgt	r5, r4, ip
   b61aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b61ae:	bd70      	popgt	{r4, r5, r6, pc}
   b61b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b61b4:	f04f 0e00 	mov.w	lr, #0
   b61b8:	3c01      	subs	r4, #1
   b61ba:	f300 80ab 	bgt.w	b6314 <__aeabi_dmul+0x238>
   b61be:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b61c2:	bfde      	ittt	le
   b61c4:	2000      	movle	r0, #0
   b61c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b61ca:	bd70      	pople	{r4, r5, r6, pc}
   b61cc:	f1c4 0400 	rsb	r4, r4, #0
   b61d0:	3c20      	subs	r4, #32
   b61d2:	da35      	bge.n	b6240 <__aeabi_dmul+0x164>
   b61d4:	340c      	adds	r4, #12
   b61d6:	dc1b      	bgt.n	b6210 <__aeabi_dmul+0x134>
   b61d8:	f104 0414 	add.w	r4, r4, #20
   b61dc:	f1c4 0520 	rsb	r5, r4, #32
   b61e0:	fa00 f305 	lsl.w	r3, r0, r5
   b61e4:	fa20 f004 	lsr.w	r0, r0, r4
   b61e8:	fa01 f205 	lsl.w	r2, r1, r5
   b61ec:	ea40 0002 	orr.w	r0, r0, r2
   b61f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b61f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b61f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b61fc:	fa21 f604 	lsr.w	r6, r1, r4
   b6200:	eb42 0106 	adc.w	r1, r2, r6
   b6204:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6208:	bf08      	it	eq
   b620a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b620e:	bd70      	pop	{r4, r5, r6, pc}
   b6210:	f1c4 040c 	rsb	r4, r4, #12
   b6214:	f1c4 0520 	rsb	r5, r4, #32
   b6218:	fa00 f304 	lsl.w	r3, r0, r4
   b621c:	fa20 f005 	lsr.w	r0, r0, r5
   b6220:	fa01 f204 	lsl.w	r2, r1, r4
   b6224:	ea40 0002 	orr.w	r0, r0, r2
   b6228:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b622c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6230:	f141 0100 	adc.w	r1, r1, #0
   b6234:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6238:	bf08      	it	eq
   b623a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b623e:	bd70      	pop	{r4, r5, r6, pc}
   b6240:	f1c4 0520 	rsb	r5, r4, #32
   b6244:	fa00 f205 	lsl.w	r2, r0, r5
   b6248:	ea4e 0e02 	orr.w	lr, lr, r2
   b624c:	fa20 f304 	lsr.w	r3, r0, r4
   b6250:	fa01 f205 	lsl.w	r2, r1, r5
   b6254:	ea43 0302 	orr.w	r3, r3, r2
   b6258:	fa21 f004 	lsr.w	r0, r1, r4
   b625c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6260:	fa21 f204 	lsr.w	r2, r1, r4
   b6264:	ea20 0002 	bic.w	r0, r0, r2
   b6268:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b626c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6270:	bf08      	it	eq
   b6272:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6276:	bd70      	pop	{r4, r5, r6, pc}
   b6278:	f094 0f00 	teq	r4, #0
   b627c:	d10f      	bne.n	b629e <__aeabi_dmul+0x1c2>
   b627e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b6282:	0040      	lsls	r0, r0, #1
   b6284:	eb41 0101 	adc.w	r1, r1, r1
   b6288:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b628c:	bf08      	it	eq
   b628e:	3c01      	subeq	r4, #1
   b6290:	d0f7      	beq.n	b6282 <__aeabi_dmul+0x1a6>
   b6292:	ea41 0106 	orr.w	r1, r1, r6
   b6296:	f095 0f00 	teq	r5, #0
   b629a:	bf18      	it	ne
   b629c:	4770      	bxne	lr
   b629e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b62a2:	0052      	lsls	r2, r2, #1
   b62a4:	eb43 0303 	adc.w	r3, r3, r3
   b62a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b62ac:	bf08      	it	eq
   b62ae:	3d01      	subeq	r5, #1
   b62b0:	d0f7      	beq.n	b62a2 <__aeabi_dmul+0x1c6>
   b62b2:	ea43 0306 	orr.w	r3, r3, r6
   b62b6:	4770      	bx	lr
   b62b8:	ea94 0f0c 	teq	r4, ip
   b62bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b62c0:	bf18      	it	ne
   b62c2:	ea95 0f0c 	teqne	r5, ip
   b62c6:	d00c      	beq.n	b62e2 <__aeabi_dmul+0x206>
   b62c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b62cc:	bf18      	it	ne
   b62ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b62d2:	d1d1      	bne.n	b6278 <__aeabi_dmul+0x19c>
   b62d4:	ea81 0103 	eor.w	r1, r1, r3
   b62d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b62dc:	f04f 0000 	mov.w	r0, #0
   b62e0:	bd70      	pop	{r4, r5, r6, pc}
   b62e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b62e6:	bf06      	itte	eq
   b62e8:	4610      	moveq	r0, r2
   b62ea:	4619      	moveq	r1, r3
   b62ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b62f0:	d019      	beq.n	b6326 <__aeabi_dmul+0x24a>
   b62f2:	ea94 0f0c 	teq	r4, ip
   b62f6:	d102      	bne.n	b62fe <__aeabi_dmul+0x222>
   b62f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b62fc:	d113      	bne.n	b6326 <__aeabi_dmul+0x24a>
   b62fe:	ea95 0f0c 	teq	r5, ip
   b6302:	d105      	bne.n	b6310 <__aeabi_dmul+0x234>
   b6304:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b6308:	bf1c      	itt	ne
   b630a:	4610      	movne	r0, r2
   b630c:	4619      	movne	r1, r3
   b630e:	d10a      	bne.n	b6326 <__aeabi_dmul+0x24a>
   b6310:	ea81 0103 	eor.w	r1, r1, r3
   b6314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6318:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b631c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6320:	f04f 0000 	mov.w	r0, #0
   b6324:	bd70      	pop	{r4, r5, r6, pc}
   b6326:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b632a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b632e:	bd70      	pop	{r4, r5, r6, pc}

000b6330 <__aeabi_ddiv>:
   b6330:	b570      	push	{r4, r5, r6, lr}
   b6332:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6336:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b633a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b633e:	bf1d      	ittte	ne
   b6340:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6344:	ea94 0f0c 	teqne	r4, ip
   b6348:	ea95 0f0c 	teqne	r5, ip
   b634c:	f000 f8a7 	bleq	b649e <__aeabi_ddiv+0x16e>
   b6350:	eba4 0405 	sub.w	r4, r4, r5
   b6354:	ea81 0e03 	eor.w	lr, r1, r3
   b6358:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b635c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6360:	f000 8088 	beq.w	b6474 <__aeabi_ddiv+0x144>
   b6364:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6368:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b636c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b6370:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b6374:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b6378:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b637c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b6380:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b6384:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b6388:	429d      	cmp	r5, r3
   b638a:	bf08      	it	eq
   b638c:	4296      	cmpeq	r6, r2
   b638e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b6392:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b6396:	d202      	bcs.n	b639e <__aeabi_ddiv+0x6e>
   b6398:	085b      	lsrs	r3, r3, #1
   b639a:	ea4f 0232 	mov.w	r2, r2, rrx
   b639e:	1ab6      	subs	r6, r6, r2
   b63a0:	eb65 0503 	sbc.w	r5, r5, r3
   b63a4:	085b      	lsrs	r3, r3, #1
   b63a6:	ea4f 0232 	mov.w	r2, r2, rrx
   b63aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b63ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b63b2:	ebb6 0e02 	subs.w	lr, r6, r2
   b63b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b63ba:	bf22      	ittt	cs
   b63bc:	1ab6      	subcs	r6, r6, r2
   b63be:	4675      	movcs	r5, lr
   b63c0:	ea40 000c 	orrcs.w	r0, r0, ip
   b63c4:	085b      	lsrs	r3, r3, #1
   b63c6:	ea4f 0232 	mov.w	r2, r2, rrx
   b63ca:	ebb6 0e02 	subs.w	lr, r6, r2
   b63ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   b63d2:	bf22      	ittt	cs
   b63d4:	1ab6      	subcs	r6, r6, r2
   b63d6:	4675      	movcs	r5, lr
   b63d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b63dc:	085b      	lsrs	r3, r3, #1
   b63de:	ea4f 0232 	mov.w	r2, r2, rrx
   b63e2:	ebb6 0e02 	subs.w	lr, r6, r2
   b63e6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b63ea:	bf22      	ittt	cs
   b63ec:	1ab6      	subcs	r6, r6, r2
   b63ee:	4675      	movcs	r5, lr
   b63f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b63f4:	085b      	lsrs	r3, r3, #1
   b63f6:	ea4f 0232 	mov.w	r2, r2, rrx
   b63fa:	ebb6 0e02 	subs.w	lr, r6, r2
   b63fe:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6402:	bf22      	ittt	cs
   b6404:	1ab6      	subcs	r6, r6, r2
   b6406:	4675      	movcs	r5, lr
   b6408:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b640c:	ea55 0e06 	orrs.w	lr, r5, r6
   b6410:	d018      	beq.n	b6444 <__aeabi_ddiv+0x114>
   b6412:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b6416:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b641a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b641e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b6422:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b6426:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b642a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b642e:	d1c0      	bne.n	b63b2 <__aeabi_ddiv+0x82>
   b6430:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6434:	d10b      	bne.n	b644e <__aeabi_ddiv+0x11e>
   b6436:	ea41 0100 	orr.w	r1, r1, r0
   b643a:	f04f 0000 	mov.w	r0, #0
   b643e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b6442:	e7b6      	b.n	b63b2 <__aeabi_ddiv+0x82>
   b6444:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6448:	bf04      	itt	eq
   b644a:	4301      	orreq	r1, r0
   b644c:	2000      	moveq	r0, #0
   b644e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6452:	bf88      	it	hi
   b6454:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6458:	f63f aeaf 	bhi.w	b61ba <__aeabi_dmul+0xde>
   b645c:	ebb5 0c03 	subs.w	ip, r5, r3
   b6460:	bf04      	itt	eq
   b6462:	ebb6 0c02 	subseq.w	ip, r6, r2
   b6466:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b646a:	f150 0000 	adcs.w	r0, r0, #0
   b646e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6472:	bd70      	pop	{r4, r5, r6, pc}
   b6474:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b6478:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b647c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b6480:	bfc2      	ittt	gt
   b6482:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6486:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b648a:	bd70      	popgt	{r4, r5, r6, pc}
   b648c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6490:	f04f 0e00 	mov.w	lr, #0
   b6494:	3c01      	subs	r4, #1
   b6496:	e690      	b.n	b61ba <__aeabi_dmul+0xde>
   b6498:	ea45 0e06 	orr.w	lr, r5, r6
   b649c:	e68d      	b.n	b61ba <__aeabi_dmul+0xde>
   b649e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b64a2:	ea94 0f0c 	teq	r4, ip
   b64a6:	bf08      	it	eq
   b64a8:	ea95 0f0c 	teqeq	r5, ip
   b64ac:	f43f af3b 	beq.w	b6326 <__aeabi_dmul+0x24a>
   b64b0:	ea94 0f0c 	teq	r4, ip
   b64b4:	d10a      	bne.n	b64cc <__aeabi_ddiv+0x19c>
   b64b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b64ba:	f47f af34 	bne.w	b6326 <__aeabi_dmul+0x24a>
   b64be:	ea95 0f0c 	teq	r5, ip
   b64c2:	f47f af25 	bne.w	b6310 <__aeabi_dmul+0x234>
   b64c6:	4610      	mov	r0, r2
   b64c8:	4619      	mov	r1, r3
   b64ca:	e72c      	b.n	b6326 <__aeabi_dmul+0x24a>
   b64cc:	ea95 0f0c 	teq	r5, ip
   b64d0:	d106      	bne.n	b64e0 <__aeabi_ddiv+0x1b0>
   b64d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b64d6:	f43f aefd 	beq.w	b62d4 <__aeabi_dmul+0x1f8>
   b64da:	4610      	mov	r0, r2
   b64dc:	4619      	mov	r1, r3
   b64de:	e722      	b.n	b6326 <__aeabi_dmul+0x24a>
   b64e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b64e4:	bf18      	it	ne
   b64e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b64ea:	f47f aec5 	bne.w	b6278 <__aeabi_dmul+0x19c>
   b64ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b64f2:	f47f af0d 	bne.w	b6310 <__aeabi_dmul+0x234>
   b64f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b64fa:	f47f aeeb 	bne.w	b62d4 <__aeabi_dmul+0x1f8>
   b64fe:	e712      	b.n	b6326 <__aeabi_dmul+0x24a>

000b6500 <__aeabi_d2uiz>:
   b6500:	004a      	lsls	r2, r1, #1
   b6502:	d211      	bcs.n	b6528 <__aeabi_d2uiz+0x28>
   b6504:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b6508:	d211      	bcs.n	b652e <__aeabi_d2uiz+0x2e>
   b650a:	d50d      	bpl.n	b6528 <__aeabi_d2uiz+0x28>
   b650c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b6510:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b6514:	d40e      	bmi.n	b6534 <__aeabi_d2uiz+0x34>
   b6516:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b651a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b651e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b6522:	fa23 f002 	lsr.w	r0, r3, r2
   b6526:	4770      	bx	lr
   b6528:	f04f 0000 	mov.w	r0, #0
   b652c:	4770      	bx	lr
   b652e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b6532:	d102      	bne.n	b653a <__aeabi_d2uiz+0x3a>
   b6534:	f04f 30ff 	mov.w	r0, #4294967295
   b6538:	4770      	bx	lr
   b653a:	f04f 0000 	mov.w	r0, #0
   b653e:	4770      	bx	lr

000b6540 <atexit>:
   b6540:	2300      	movs	r3, #0
   b6542:	4601      	mov	r1, r0
   b6544:	461a      	mov	r2, r3
   b6546:	4618      	mov	r0, r3
   b6548:	f000 b85e 	b.w	b6608 <__register_exitproc>

000b654c <memcpy>:
   b654c:	440a      	add	r2, r1
   b654e:	4291      	cmp	r1, r2
   b6550:	f100 33ff 	add.w	r3, r0, #4294967295
   b6554:	d100      	bne.n	b6558 <memcpy+0xc>
   b6556:	4770      	bx	lr
   b6558:	b510      	push	{r4, lr}
   b655a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b655e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6562:	4291      	cmp	r1, r2
   b6564:	d1f9      	bne.n	b655a <memcpy+0xe>
   b6566:	bd10      	pop	{r4, pc}

000b6568 <memset>:
   b6568:	4402      	add	r2, r0
   b656a:	4603      	mov	r3, r0
   b656c:	4293      	cmp	r3, r2
   b656e:	d100      	bne.n	b6572 <memset+0xa>
   b6570:	4770      	bx	lr
   b6572:	f803 1b01 	strb.w	r1, [r3], #1
   b6576:	e7f9      	b.n	b656c <memset+0x4>

000b6578 <srand>:
   b6578:	b538      	push	{r3, r4, r5, lr}
   b657a:	4b10      	ldr	r3, [pc, #64]	; (b65bc <srand+0x44>)
   b657c:	681d      	ldr	r5, [r3, #0]
   b657e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6580:	4604      	mov	r4, r0
   b6582:	b9b3      	cbnz	r3, b65b2 <srand+0x3a>
   b6584:	2018      	movs	r0, #24
   b6586:	f7fe fa95 	bl	b4ab4 <malloc>
   b658a:	4602      	mov	r2, r0
   b658c:	63a8      	str	r0, [r5, #56]	; 0x38
   b658e:	b920      	cbnz	r0, b659a <srand+0x22>
   b6590:	4b0b      	ldr	r3, [pc, #44]	; (b65c0 <srand+0x48>)
   b6592:	480c      	ldr	r0, [pc, #48]	; (b65c4 <srand+0x4c>)
   b6594:	2142      	movs	r1, #66	; 0x42
   b6596:	f7fe faa5 	bl	b4ae4 <__assert_func>
   b659a:	490b      	ldr	r1, [pc, #44]	; (b65c8 <srand+0x50>)
   b659c:	4b0b      	ldr	r3, [pc, #44]	; (b65cc <srand+0x54>)
   b659e:	e9c0 1300 	strd	r1, r3, [r0]
   b65a2:	4b0b      	ldr	r3, [pc, #44]	; (b65d0 <srand+0x58>)
   b65a4:	6083      	str	r3, [r0, #8]
   b65a6:	230b      	movs	r3, #11
   b65a8:	8183      	strh	r3, [r0, #12]
   b65aa:	2100      	movs	r1, #0
   b65ac:	2001      	movs	r0, #1
   b65ae:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b65b2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b65b4:	2200      	movs	r2, #0
   b65b6:	611c      	str	r4, [r3, #16]
   b65b8:	615a      	str	r2, [r3, #20]
   b65ba:	bd38      	pop	{r3, r4, r5, pc}
   b65bc:	2003e508 	.word	0x2003e508
   b65c0:	000b6aa5 	.word	0x000b6aa5
   b65c4:	000b6abc 	.word	0x000b6abc
   b65c8:	abcd330e 	.word	0xabcd330e
   b65cc:	e66d1234 	.word	0xe66d1234
   b65d0:	0005deec 	.word	0x0005deec

000b65d4 <strcmp>:
   b65d4:	f810 2b01 	ldrb.w	r2, [r0], #1
   b65d8:	f811 3b01 	ldrb.w	r3, [r1], #1
   b65dc:	2a01      	cmp	r2, #1
   b65de:	bf28      	it	cs
   b65e0:	429a      	cmpcs	r2, r3
   b65e2:	d0f7      	beq.n	b65d4 <strcmp>
   b65e4:	1ad0      	subs	r0, r2, r3
   b65e6:	4770      	bx	lr

000b65e8 <strcpy>:
   b65e8:	4603      	mov	r3, r0
   b65ea:	f811 2b01 	ldrb.w	r2, [r1], #1
   b65ee:	f803 2b01 	strb.w	r2, [r3], #1
   b65f2:	2a00      	cmp	r2, #0
   b65f4:	d1f9      	bne.n	b65ea <strcpy+0x2>
   b65f6:	4770      	bx	lr

000b65f8 <strlen>:
   b65f8:	4603      	mov	r3, r0
   b65fa:	f813 2b01 	ldrb.w	r2, [r3], #1
   b65fe:	2a00      	cmp	r2, #0
   b6600:	d1fb      	bne.n	b65fa <strlen+0x2>
   b6602:	1a18      	subs	r0, r3, r0
   b6604:	3801      	subs	r0, #1
   b6606:	4770      	bx	lr

000b6608 <__register_exitproc>:
   b6608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b660c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b66c8 <__register_exitproc+0xc0>
   b6610:	4606      	mov	r6, r0
   b6612:	f8d8 0000 	ldr.w	r0, [r8]
   b6616:	461f      	mov	r7, r3
   b6618:	460d      	mov	r5, r1
   b661a:	4691      	mov	r9, r2
   b661c:	f000 f856 	bl	b66cc <__retarget_lock_acquire_recursive>
   b6620:	4b25      	ldr	r3, [pc, #148]	; (b66b8 <__register_exitproc+0xb0>)
   b6622:	681c      	ldr	r4, [r3, #0]
   b6624:	b934      	cbnz	r4, b6634 <__register_exitproc+0x2c>
   b6626:	4c25      	ldr	r4, [pc, #148]	; (b66bc <__register_exitproc+0xb4>)
   b6628:	601c      	str	r4, [r3, #0]
   b662a:	4b25      	ldr	r3, [pc, #148]	; (b66c0 <__register_exitproc+0xb8>)
   b662c:	b113      	cbz	r3, b6634 <__register_exitproc+0x2c>
   b662e:	681b      	ldr	r3, [r3, #0]
   b6630:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6634:	6863      	ldr	r3, [r4, #4]
   b6636:	2b1f      	cmp	r3, #31
   b6638:	dd07      	ble.n	b664a <__register_exitproc+0x42>
   b663a:	f8d8 0000 	ldr.w	r0, [r8]
   b663e:	f000 f847 	bl	b66d0 <__retarget_lock_release_recursive>
   b6642:	f04f 30ff 	mov.w	r0, #4294967295
   b6646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b664a:	b34e      	cbz	r6, b66a0 <__register_exitproc+0x98>
   b664c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6650:	b988      	cbnz	r0, b6676 <__register_exitproc+0x6e>
   b6652:	4b1c      	ldr	r3, [pc, #112]	; (b66c4 <__register_exitproc+0xbc>)
   b6654:	b923      	cbnz	r3, b6660 <__register_exitproc+0x58>
   b6656:	f8d8 0000 	ldr.w	r0, [r8]
   b665a:	f000 f838 	bl	b66ce <__retarget_lock_release>
   b665e:	e7f0      	b.n	b6642 <__register_exitproc+0x3a>
   b6660:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6664:	f7fe fa26 	bl	b4ab4 <malloc>
   b6668:	2800      	cmp	r0, #0
   b666a:	d0f4      	beq.n	b6656 <__register_exitproc+0x4e>
   b666c:	2300      	movs	r3, #0
   b666e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b6672:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b6676:	6863      	ldr	r3, [r4, #4]
   b6678:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b667c:	2201      	movs	r2, #1
   b667e:	409a      	lsls	r2, r3
   b6680:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6684:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6688:	4313      	orrs	r3, r2
   b668a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b668e:	2e02      	cmp	r6, #2
   b6690:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6694:	bf02      	ittt	eq
   b6696:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b669a:	4313      	orreq	r3, r2
   b669c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b66a0:	6863      	ldr	r3, [r4, #4]
   b66a2:	f8d8 0000 	ldr.w	r0, [r8]
   b66a6:	1c5a      	adds	r2, r3, #1
   b66a8:	3302      	adds	r3, #2
   b66aa:	6062      	str	r2, [r4, #4]
   b66ac:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b66b0:	f000 f80e 	bl	b66d0 <__retarget_lock_release_recursive>
   b66b4:	2000      	movs	r0, #0
   b66b6:	e7c6      	b.n	b6646 <__register_exitproc+0x3e>
   b66b8:	2003e7e8 	.word	0x2003e7e8
   b66bc:	2003e75c 	.word	0x2003e75c
   b66c0:	00000000 	.word	0x00000000
   b66c4:	000b4ab5 	.word	0x000b4ab5
   b66c8:	2003e56c 	.word	0x2003e56c

000b66cc <__retarget_lock_acquire_recursive>:
   b66cc:	4770      	bx	lr

000b66ce <__retarget_lock_release>:
   b66ce:	4770      	bx	lr

000b66d0 <__retarget_lock_release_recursive>:
   b66d0:	4770      	bx	lr

000b66d2 <link_code_end>:
	...

000b66d4 <dynalib_user>:
   b66d4:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b66e4:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b66f4:	7620 7269 7574 6c61 4d00 5f72 6143 6564      virtual.Mr_Cade
   b6704:	006e 6f69 612e 6164 7266 6975 2e74 6f63     n.io.adafruit.co
   b6714:	006d 6961 5f6f 554a 4166 3332 4f69 4430     m.aio_JUfA23iO0D
   b6724:	386a 617a 776f 4747 4765 6347 5144 4134     j8zaowGGeGGcDQ4A
   b6734:	5431 4d00 5f72 6143 6564 2f6e 6566 6465     1T.Mr_Caden/feed
   b6744:	2f73 6d69 6761 0065                         s/image.

000b674c <_ZL5COLOR>:
   b674c:	0000 0000 0001 0000 0002 0000 0003 0000     ................
   b675c:	0004 0000 0005 0000 0006 0000 0007 0000     ................
   b676c:	0008 0000                                   ....

000b6770 <_ZTV19Adafruit_MQTT_SPARK>:
	...
   b6778:	4551 000b 45dd 000b 44fd 000b 45ab 000b     QE...E...D...E..
   b6788:	45eb 000b 4511 000b 4553 000b               .E...E..SE..

000b6794 <_ZTV13Adafruit_MQTT>:
	...
   b67a4:	40a5 000b 40a5 000b 40a5 000b 40a5 000b     .@...@...@...@..
   b67b4:	40a5 000b                                   .@..

000b67b8 <_ZTVN5spark13EthernetClassE>:
	...
   b67c0:	4b63 000b 4b59 000b 4b4f 000b 4b45 000b     cK..YK..OK..EK..
   b67d0:	4b39 000b 4b2d 000b 57d9 000b 57e1 000b     9K..-K...W...W..
   b67e0:	4b21 000b 4b19 000b 4b0f 000b 4b05 000b     !K...K...K...K..
   b67f0:	5811 000b                                   .X..

000b67f4 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b67fc:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   b680c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b681c <_ZTV9IPAddress>:
	...
   b6824:	4e31 000b 4e21 000b 4e23 000b               1N..!N..#N..

000b6830 <_ZTV9USBSerial>:
	...
   b6838:	4f43 000b 4fab 000b 4f81 000b 4bf1 000b     CO...O...O...K..
   b6848:	4f73 000b 4f45 000b 4f55 000b 4fa5 000b     sO..EO..UO...O..
   b6858:	4f65 000b 4f3d 000b                         eO..=O..

000b6860 <_ZTV11USARTSerial>:
	...
   b6868:	504d 000b 50b9 000b 5091 000b 4bf1 000b     MP...P...P...K..
   b6878:	5061 000b 507d 000b 506f 000b 508b 000b     aP..}P..oP...P..
   b6888:	504f 000b 5053 000b                         OP..SP..

000b6890 <_ZTV7TwoWire>:
	...
   b6898:	50f1 000b 513b 000b 5113 000b 50f3 000b     .P..;Q...Q...P..
   b68a8:	511b 000b 5123 000b 512b 000b 5133 000b     .Q..#Q..+Q..3Q..
   b68b8:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   b68c8:	2072 203d 6425 0000                         r = %d..

000b68d0 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b68d8:	5209 000b 522d 000b 5717 000b 523b 000b     .R..-R...W..;R..
   b68e8:	520d 000b                                   .R..

000b68ec <_ZTV9TCPClient>:
	...
   b68f4:	4cb1 000b 4cc9 000b 5185 000b 519f 000b     .L...L...Q...Q..
   b6904:	55ad 000b 51c9 000b 5423 000b 51fd 000b     .U...Q..#T...Q..
   b6914:	54b5 000b 52f5 000b 5451 000b 5661 000b     .T...R..QT..aV..
   b6924:	53f1 000b 51ff 000b 51b1 000b 5241 000b     .S...Q...Q..AR..
   b6934:	52d5 000b                                   .R..

000b6938 <_ZTVN5spark9WiFiClassE>:
	...
   b6940:	577b 000b 5771 000b 5767 000b 571d 000b     {W..qW..gW...W..
   b6950:	575b 000b 574f 000b 57d9 000b 57e1 000b     [W..OW...W...W..
   b6960:	5743 000b 573b 000b 5731 000b 5727 000b     CW..;W..1W..'W..
   b6970:	5811 000b                                   .X..

000b6974 <_ZTVN5spark12NetworkClassE>:
	...
   b697c:	5799 000b 57a3 000b 57ad 000b 57b7 000b     .W...W...W...W..
   b698c:	57c1 000b 57cd 000b 57d9 000b 57e1 000b     .W...W...W...W..
   b699c:	57e9 000b 57f5 000b 57fd 000b 5807 000b     .W...W...W...X..
   b69ac:	5811 000b                                   .X..

000b69b0 <_ZSt7nothrow>:
	...

000b69b1 <_ZTSSt19_Sp_make_shared_tag>:
   b69b1:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b69c1:	6572 5f64 6174 0067 0000                     red_tag....

000b69cc <_ZTISt19_Sp_make_shared_tag>:
   b69cc:	6a0c 000b 69b1 000b                         .j...i..

000b69d4 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b69d4:	6a6c 000b 69e0 000b 6a90 000b               lj...i...j..

000b69e0 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b69e0:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b69f0:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b6a00:	0045 0000                                   E...

000b6a04 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b6a04:	0000 0000 69d4 000b 5b8d 000b 5ba1 000b     .....i...[...[..
   b6a14:	5d35 000b 5d35 000b 5c0b 000b 5b4d 000b     5]..5]...\..M[..
   b6a24:	5bf3 000b 5bb5 000b 5b7f 000b               .[...[...[..

000b6a30 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b6a30:	6a6c 000b 6a3c 000b 69d4 000b               lj..<j...i..

000b6a3c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b6a3c:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b6a4c:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b6a5c:	666e 456f 0000 0000                         nfoE....

000b6a64 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b6a64:	0000 0000 6a30 000b 5c35 000b 5c49 000b     ....0j..5\..I\..
   b6a74:	5d35 000b 5d35 000b 5c0b 000b 5b4d 000b     5]..5]...\..M[..
   b6a84:	5d09 000b 5c95 000b 5c5d 000b               .]...\..]\..

000b6a90 <_ZTISt9type_info>:
   b6a90:	6a0c 000b 6a98 000b                         .j...j..

000b6a98 <_ZTSSt9type_info>:
   b6a98:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b6aa8:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b6ab8:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b6ac8:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b6ad8:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b6ae8:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b6af8:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b6b08:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b6b18:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b6b28:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b6b39 <link_const_variable_data_end>:
   b6b39:	00          	.byte	0x00
	...

000b6b3c <link_constructors_location>:
   b6b3c:	000b448d 	.word	0x000b448d
   b6b40:	000b4b6d 	.word	0x000b4b6d
   b6b44:	000b4b95 	.word	0x000b4b95
   b6b48:	000b4be1 	.word	0x000b4be1
   b6b4c:	000b4c85 	.word	0x000b4c85
   b6b50:	000b4c95 	.word	0x000b4c95
   b6b54:	000b4cdd 	.word	0x000b4cdd
   b6b58:	000b5785 	.word	0x000b5785
   b6b5c:	000b58e9 	.word	0x000b58e9
